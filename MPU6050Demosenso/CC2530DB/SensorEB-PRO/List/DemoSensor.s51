///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               26/May/2015  21:44:46 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Samples\MPU6050«„–±Ω«\Source\DemoSe /
//                          nsor.c                                            /
//    Command line       =  -f "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\MPU6050«„–±Ω«\CC2530DB\ /
//                          ..\..\..\Tools\CC2530DB\f8wEndev.cfg"             /
//                          (-DCPU32MHZ -DROOT=__near_func -DBLINK_LEDS) -f   /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\MPU6050«„–±Ω«\CC2530DB\..\ /
//                          ..\..\Tools\CC2530DB\f8wConfig.cfg" (-DSECURE=0   /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Texas                  /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\Source\DemoSensor.c"   /
//                          -D ZIGBEEPRO -D NWK_AUTO_POLL -D REFLECTOR -D     /
//                          POWER_SAVING -D NV_INIT -D NV_RESTORE -D          /
//                          DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ENDDEVICE -D    /
//                          LCD_SUPPORTED -lC "C:\Texas                       /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\SensorEB-PRO\ /
//                          List\" -lA "C:\Texas Instruments\ZStack-CC2530-2. /
//                          3.0-1.4.0\Projects\zstack\Samples\MPU6050«„–±Ω«\C /
//                          C2530DB\SensorEB-PRO\List\" --diag_suppress       /
//                          Pe001,Pa010 -o "C:\Texas                          /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\SensorEB-PRO\ /
//                          Obj\" -e --require_prototypes --debug             /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Texas                 /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\" -I          /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\MPU6050«„–±Ω«\CC2530DB\..\ /
//                          SOURCE\" -I "C:\Texas Instruments\ZStack-CC2530-2 /
//                          .3.0-1.4.0\Projects\zstack\Samples\MPU6050«„–±Ω«\ /
//                          CC2530DB\..\..\..\ZMAIN\TI2530DB\" -I "C:\Texas   /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MT\" -I "C:\Texas                    /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\HAL\INCLUDE\" -I "C:\Texas           /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\HAL\TARGET\CC2530EB\" -I "C:\Texas   /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\OSAL\MCU\CCSOC\" -I "C:\Texas        /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\OSAL\INCLUDE\" -I "C:\Texas          /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\AF\" -I "C:\Texas              /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\NWK\" -I "C:\Texas             /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SEC\" -I "C:\Texas             /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SAPI\" -I "C:\Texas            /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SYS\" -I "C:\Texas             /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\ZDO\" -I "C:\Texas             /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\ZMAC\F8W\" -I "C:\Texas              /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\ZMAC\" -I "C:\Texas                  /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\SERVICES\SADDR\" -I "C:\Texas        /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\SERVICES\SDATA\" -I "C:\Texas        /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\INCLUDE\" -I "C:\Texas           /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\HIGH_LEVEL\" -I "C:\Texas        /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I "C:\Texas   /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\MPU6050«„–±Ω«\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"    /
//                          -I "C:\Program Files\IAR Systems\Embedded         /
//                          Workbench 5.3\8051\INC\" -I "C:\Program           /
//                          Files\IAR Systems\Embedded Workbench              /
//                          5.3\8051\INC\CLIB\" -Ohz                          /
//    List file          =  C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Samples\MPU6050«„–±Ω«\CC2530DB\Sens /
//                          orEB-PRO\List\DemoSensor.s51                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME DemoSensor

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??GetData?relay
        EXTERN ??InitMPU6050?relay
        EXTERN ??NOP?relay
        EXTERN ??RecvACK?relay
        EXTERN ??RecvByte?relay
        EXTERN ??SendACK?relay
        EXTERN ??SendByte?relay
        EXTERN ??Single_Read?relay
        EXTERN ??Single_Write?relay
        EXTERN ??Start?relay
        EXTERN ??Stop?relay
        EXTERN ??filter?relay
        EXTERN ??lcd_printf?relay
        EXTERN ??sendReport?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_DIV
        EXTERN ?FLT_EQ
        EXTERN ?FLT_LT
        EXTERN ?FLT_MUL
        EXTERN ?FLT_SUB
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_TO_FLT
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?S_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??GetData?relay
        FUNCTION ??GetData?relay,0203H
        PUBLIC ??InitMPU6050?relay
        FUNCTION ??InitMPU6050?relay,0203H
        PUBLIC ??NOP?relay
        FUNCTION ??NOP?relay,0203H
        PUBLIC ??RecvACK?relay
        FUNCTION ??RecvACK?relay,0203H
        PUBLIC ??RecvByte?relay
        FUNCTION ??RecvByte?relay,0203H
        PUBLIC ??SendACK?relay
        FUNCTION ??SendACK?relay,0203H
        PUBLIC ??SendByte?relay
        FUNCTION ??SendByte?relay,0203H
        PUBLIC ??Single_Read?relay
        FUNCTION ??Single_Read?relay,0203H
        PUBLIC ??Single_Write?relay
        FUNCTION ??Single_Write?relay,0203H
        PUBLIC ??Start?relay
        FUNCTION ??Start?relay,0203H
        PUBLIC ??Stop?relay
        FUNCTION ??Stop?relay,0203H
        PUBLIC ??filter?relay
        FUNCTION ??filter?relay,0203H
        PUBLIC ??lcd_printf?relay
        FUNCTION ??lcd_printf?relay,0203H
        FUNCTION ??sendReport?relay,0203H
        PUBLIC ??uartRxCB?relay
        FUNCTION ??uartRxCB?relay,0203H
        PUBLIC ??zb_AllowBindConfirm?relay
        FUNCTION ??zb_AllowBindConfirm?relay,0203H
        PUBLIC ??zb_BindConfirm?relay
        FUNCTION ??zb_BindConfirm?relay,0203H
        PUBLIC ??zb_FindDeviceConfirm?relay
        FUNCTION ??zb_FindDeviceConfirm?relay,0203H
        PUBLIC ??zb_HandleKeys?relay
        FUNCTION ??zb_HandleKeys?relay,0203H
        PUBLIC ??zb_HandleOsalEvent?relay
        FUNCTION ??zb_HandleOsalEvent?relay,0203H
        PUBLIC ??zb_ReceiveDataIndication?relay
        FUNCTION ??zb_ReceiveDataIndication?relay,0203H
        PUBLIC ??zb_SendDataConfirm?relay
        FUNCTION ??zb_SendDataConfirm?relay,0203H
        PUBLIC ??zb_StartConfirm?relay
        FUNCTION ??zb_StartConfirm?relay,0203H
        PUBLIC FO
        PUBLIC Fvalue
        PUBLIC GetData
        FUNCTION GetData,021203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC InitMPU6050
        FUNCTION InitMPU6050,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC `NOP`
        FUNCTION `NOP`,080203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK P1DIR
        PUBLIC RecvACK
        FUNCTION RecvACK,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC RecvByte
        FUNCTION RecvByte,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SendACK
        FUNCTION SendACK,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC SendByte
        FUNCTION SendByte,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Single_Read
        FUNCTION Single_Read,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Single_Write
        FUNCTION Single_Write,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC Start
        FUNCTION Start,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Stop
        FUNCTION Stop,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Svalue
        PUBWEAK _A_P1
        PUBWEAK __Constant_0
        PUBWEAK __Constant_40490fdb
        PUBWEAK __Constant_411ccccd
        PUBWEAK __Constant_43340000
        PUBWEAK __Constant_46800000
        PUBLIC `a`
        PUBLIC dis
        PUBLIC filter
        FUNCTION filter,0203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 24, STACK
        PUBLIC lcd_printf
        FUNCTION lcd_printf,0203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION sendReport,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 41, STACK
        PUBLIC uartRxCB
        FUNCTION uartRxCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_AllowBindConfirm
        FUNCTION zb_AllowBindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_BindConfirm
        FUNCTION zb_BindConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zb_FindDeviceConfirm
        FUNCTION zb_FindDeviceConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleKeys
        FUNCTION zb_HandleKeys,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zb_HandleOsalEvent
        FUNCTION zb_HandleOsalEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zb_OutCmdList
        PUBLIC zb_ReceiveDataIndication
        FUNCTION zb_ReceiveDataIndication,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zb_SendDataConfirm
        FUNCTION zb_SendDataConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zb_SimpleDesc
        PUBLIC zb_StartConfirm
        FUNCTION zb_StartConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalLedBlink         SYMBOL "HalLedBlink"
zb_StartRequest     SYMBOL "zb_StartRequest"
zb_BindDevice       SYMBOL "zb_BindDevice"
osal_set_event      SYMBOL "osal_set_event"
HalLedSet           SYMBOL "HalLedSet"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
zb_GetDeviceInfo    SYMBOL "zb_GetDeviceInfo"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
sqrt                SYMBOL "sqrt"
atan                SYMBOL "atan"
zb_SendDataRequest  SYMBOL "zb_SendDataRequest"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??atan?relay        SYMBOL "?relay", atan
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??sqrt?relay        SYMBOL "?relay", sqrt
??zb_BindDevice?relay SYMBOL "?relay", zb_BindDevice
??zb_GetDeviceInfo?relay SYMBOL "?relay", zb_GetDeviceInfo
??zb_SendDataRequest?relay SYMBOL "?relay", zb_SendDataRequest
??zb_StartRequest?relay SYMBOL "?relay", zb_StartRequest
GetData             SYMBOL "GetData"
??GetData?relay     SYMBOL "?relay", GetData
InitMPU6050         SYMBOL "InitMPU6050"
??InitMPU6050?relay SYMBOL "?relay", InitMPU6050
`NOP`               SYMBOL "NOP"
??NOP?relay         SYMBOL "?relay", `NOP`
RecvACK             SYMBOL "RecvACK"
??RecvACK?relay     SYMBOL "?relay", RecvACK
RecvByte            SYMBOL "RecvByte"
??RecvByte?relay    SYMBOL "?relay", RecvByte
SendACK             SYMBOL "SendACK"
??SendACK?relay     SYMBOL "?relay", SendACK
SendByte            SYMBOL "SendByte"
??SendByte?relay    SYMBOL "?relay", SendByte
Single_Read         SYMBOL "Single_Read"
??Single_Read?relay SYMBOL "?relay", Single_Read
Single_Write        SYMBOL "Single_Write"
??Single_Write?relay SYMBOL "?relay", Single_Write
Start               SYMBOL "Start"
??Start?relay       SYMBOL "?relay", Start
Stop                SYMBOL "Stop"
??Stop?relay        SYMBOL "?relay", Stop
filter              SYMBOL "filter"
??filter?relay      SYMBOL "?relay", filter
lcd_printf          SYMBOL "lcd_printf"
??lcd_printf?relay  SYMBOL "?relay", lcd_printf
uartRxCB            SYMBOL "uartRxCB"
??uartRxCB?relay    SYMBOL "?relay", uartRxCB
zb_AllowBindConfirm SYMBOL "zb_AllowBindConfirm"
??zb_AllowBindConfirm?relay SYMBOL "?relay", zb_AllowBindConfirm
zb_BindConfirm      SYMBOL "zb_BindConfirm"
??zb_BindConfirm?relay SYMBOL "?relay", zb_BindConfirm
zb_FindDeviceConfirm SYMBOL "zb_FindDeviceConfirm"
??zb_FindDeviceConfirm?relay SYMBOL "?relay", zb_FindDeviceConfirm
zb_HandleKeys       SYMBOL "zb_HandleKeys"
??zb_HandleKeys?relay SYMBOL "?relay", zb_HandleKeys
zb_HandleOsalEvent  SYMBOL "zb_HandleOsalEvent"
??zb_HandleOsalEvent?relay SYMBOL "?relay", zb_HandleOsalEvent
zb_ReceiveDataIndication SYMBOL "zb_ReceiveDataIndication"
??zb_ReceiveDataIndication?relay SYMBOL "?relay", zb_ReceiveDataIndication
zb_SendDataConfirm  SYMBOL "zb_SendDataConfirm"
??zb_SendDataConfirm?relay SYMBOL "?relay", zb_SendDataConfirm
zb_StartConfirm     SYMBOL "zb_StartConfirm"
??zb_StartConfirm?relay SYMBOL "?relay", zb_StartConfirm

        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_StartRequest
        FUNCTION zb_StartRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_BindDevice
        FUNCTION zb_BindDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_GetDeviceInfo
        FUNCTION zb_GetDeviceInfo,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sqrt
        FUNCTION sqrt,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN atan
        FUNCTION atan,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SendDataRequest
        FUNCTION zb_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??atan?relay
        FUNCTION ??atan?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??sqrt?relay
        FUNCTION ??sqrt?relay,00H
        EXTERN ??zb_BindDevice?relay
        FUNCTION ??zb_BindDevice?relay,00H
        EXTERN ??zb_GetDeviceInfo?relay
        FUNCTION ??zb_GetDeviceInfo?relay,00H
        EXTERN ??zb_SendDataRequest?relay
        FUNCTION ??zb_SendDataRequest?relay,00H
        EXTERN ??zb_StartRequest?relay
        FUNCTION ??zb_StartRequest?relay,00H
        EXTERN sapi_TaskID

// C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\MPU6050«„–±Ω«\Source\DemoSensor.c
//    1 /**************************************************************************************************
//    2   Filename:       DemoSensor.c
//    3 
//    4   Description:    Sensor application for the sensor demo utilizing the Simple API.
//    5 
//    6                   The sensor application binds to a gateway and will periodically 
//    7                   read temperature and supply voltage from the ADC and send report   
//    8                   towards the gateway node.  
//    9 
//   10 
//   11   Copyright 2009 Texas Instruments Incorporated. All rights reserved.
//   12 
//   13   IMPORTANT: Your use of this Software is limited to those specific rights
//   14   granted under the terms of a software license agreement between the user
//   15   who downloaded the software, his/her employer (which must be your employer)
//   16   and Texas Instruments Incorporated (the "License").  You may not use this
//   17   Software unless you agree to abide by the terms of the License. The License
//   18   limits your use, and you acknowledge, that the Software may not be modified,
//   19   copied or distributed unless embedded on a Texas Instruments microcontroller
//   20   or used solely and exclusively in conjunction with a Texas Instruments radio
//   21   frequency transceiver, which is integrated into your product.  Other than for
//   22   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   23   works of, modify, distribute, perform, display or sell this Software and/or
//   24   its documentation for any purpose.
//   25 
//   26   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   27   PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   28   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   29   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   30   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   31   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   32   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   33   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   34   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   35   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   36   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   37 
//   38   Should you have any questions regarding your right to use this Software,
//   39   contact Texas Instruments Incorporated at www.TI.com.
//   40 **************************************************************************************************/
//   41 
//   42 /******************************************************************************
//   43  * INCLUDES
//   44  */
//   45 
//   46 #include "ZComDef.h"
//   47 #include "OSAL.h"
//   48 #include "sapi.h"
//   49 #include "hal_key.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1
//   50 #include "hal_lcd.h"
//   51 #include "hal_led.h"
//   52 #include "hal_adc.h"
//   53 #include "hal_mcu.h"
//   54 #include "hal_uart.h"
//   55 #include "DemoApp.h"
//   56 
//   57 #include "math.h"
//   58 #include "MPU6050.h"

        RSEG XDATA_Z:XDATA:NOROOT(0)
// uint8 __xdata dis[6]
dis:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
// uint8 __xdata FO
FO:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant void NOP(void)
`NOP`:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function `NOP`
        ; Saved register size: 0
        ; Auto size: 0
        MOV     R2,#0x5
??NOP_0:
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        NOP
        DEC     R2
        MOV     A,R2
        JNZ     ??NOP_0
        LJMP    ?BRET
        CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant void Start(void)
Start:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function Start
        FUNCALL Start, `NOP`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Start, `NOP`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        SETB    0x90.2
        SETB    0x90.3
        ; Setup parameters for call to function NOP
        LCALL   ??NOP?relay
        CLR     0x90.2
        ; Setup parameters for call to function NOP
        LCALL   ??NOP?relay
        CLR     0x90.3
        LJMP    ?Subroutine10 & 0xFFFF
        CFI EndBlock cfiBlock1
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant void Stop(void)
Stop:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Stop
        FUNCALL Stop, `NOP`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Stop, `NOP`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_8:
        CLR     0x90.2
        SETB    0x90.3
        ; Setup parameters for call to function NOP
        LCALL   ??NOP?relay
        SETB    0x90.2
        ; Setup parameters for call to function NOP
        LCALL   ??NOP?relay
        LJMP    ?Subroutine10 & 0xFFFF
        CFI EndBlock cfiBlock2
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant void SendACK(uint8)
SendACK:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SendACK
        FUNCALL SendACK, `NOP`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendACK, `NOP`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     A,R1
        MOV     C,0xE0 /* A   */.0
        MOV     0x90.2,C
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_11:
        LJMP    ?Subroutine10 & 0xFFFF
        CFI EndBlock cfiBlock3
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond5) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond5) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond5) CFA_SP SP+-5
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        ORL     0xfe,#0x8
        ORL     0xfe,#0x4
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant uint8 RecvACK(void)
RecvACK:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function RecvACK
        FUNCALL RecvACK, `NOP`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RecvACK, `NOP`
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ORL     0xfe,#0x8
        ANL     0xfe,#0xfb
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     DPTR,#FO
        MOVX    @DPTR,A
        CLR     0x90.3
        ; Setup parameters for call to function NOP
        LCALL   ??NOP?relay
        MOV     DPTR,#FO
        MOVX    A,@DPTR
        MOV     R1,A
        LJMP    ?Subroutine10 & 0xFFFF
        CFI EndBlock cfiBlock9
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant void SendByte(uint8)
SendByte:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function SendByte
        FUNCALL SendByte, `NOP`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendByte, `NOP`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendByte, RecvACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     R6,#0x8
??SendByte_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.7
        JNC     ??SendByte_1
        SETB    0x90.2
        SJMP    ??SendByte_2
??SendByte_1:
        CLR     0x90.2
??SendByte_2:
        CLR     C
        RLC     A
        MOV     R7,A
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_12:
        DEC     R6
        MOV     A,R6
        JNZ     ??SendByte_0
        ; Setup parameters for call to function RecvACK
        LCALL   ??RecvACK?relay
        SJMP    ??Subroutine12_0
        CFI EndBlock cfiBlock10
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        SETB    0x90.3
        ; Setup parameters for call to function NOP
        ; Setup parameters for call to function NOP
        LCALL   ??NOP?relay
        CLR     0x90.3
        ; Setup parameters for call to function NOP
        ; Setup parameters for call to function NOP
        LCALL   ??NOP?relay
        RET
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant uint8 RecvByte(void)
RecvByte:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function RecvByte
        FUNCALL RecvByte, `NOP`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL RecvByte, `NOP`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     R7,#0x0
        ANL     0xfe,#0xfb
        ORL     0xfe,#0x8
        SETB    0x90.2
        MOV     R6,#0x8
??RecvByte_0:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_14:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        ORL     A,R2
        MOV     R7,A
        CLR     0x90.3
        ; Setup parameters for call to function NOP
        LCALL   ??NOP?relay
        DEC     R6
        MOV     A,R6
        JNZ     ??RecvByte_0
        MOV     A,R7
        SJMP    ?Subroutine11
        CFI EndBlock cfiBlock14
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        SETB    0x90.3
        ; Setup parameters for call to function NOP
        ; Setup parameters for call to function NOP
        LCALL   ??NOP?relay
        MOV     C,0x90.2
        CLR     A
        MOV     0xE0 /* A   */.0,C
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant void Single_Write(uint8, uint8)
Single_Write:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function Single_Write
        FUNCALL Single_Write, Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write, SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write, SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write, SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Write, Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
        ; Setup parameters for call to function Start
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        ; Setup parameters for call to function SendByte
        MOV     A,R7
        MOV     R1,A
        LCALL   ??SendByte?relay
        ; Setup parameters for call to function Stop
        LCALL   ??Stop?relay
        SJMP    ??Subroutine12_0
        CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,A
        CFI EndBlock cfiBlock19
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant uint8 Single_Read(uint8)
Single_Read:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function Single_Read
        FUNCALL Single_Read, Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read, SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read, SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read, Start
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read, SendByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read, RecvByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read, SendACK
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Single_Read, Stop
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function Start
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function Start
        LCALL   ??Start?relay
        ; Setup parameters for call to function SendByte
        MOV     R1,#-0x2f
        LCALL   ??SendByte?relay
        ; Setup parameters for call to function RecvByte
        LCALL   ??RecvByte?relay
        MOV     A,R1
        MOV     R6,A
        ; Setup parameters for call to function SendACK
        MOV     R1,#0x1
        LCALL   ??SendACK?relay
        ; Setup parameters for call to function Stop
        LCALL   ??Stop?relay
        MOV     A,R6
        SJMP    ?Subroutine11
        CFI EndBlock cfiBlock21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        LCALL   ??Start?relay
        ; Setup parameters for call to function SendByte
        ; Setup parameters for call to function SendByte
        MOV     R1,#-0x30
        LCALL   ??SendByte?relay
        ; Setup parameters for call to function SendByte
        ; Setup parameters for call to function SendByte
        MOV     A,R6
        MOV     R1,A
        LCALL   ??SendByte?relay
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant void InitMPU6050(void)
InitMPU6050:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function InitMPU6050
        FUNCALL InitMPU6050, Single_Write
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_Write
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_Write
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_Write
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL InitMPU6050, Single_Write
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        ORL     0xfe,#0x8
        ; Setup parameters for call to function Single_Write
        MOV     R2,#0x0
        MOV     R1,#0x6b
        LCALL   ??Single_Write?relay
        ; Setup parameters for call to function Single_Write
        MOV     R2,#0x7
        MOV     R1,#0x19
        LCALL   ??Single_Write?relay
        ; Setup parameters for call to function Single_Write
        MOV     R2,#0x6
        MOV     R1,#0x1a
        LCALL   ??Single_Write?relay
        ; Setup parameters for call to function Single_Write
        MOV     R2,#0x18
        MOV     R1,#0x1b
        LCALL   ??Single_Write?relay
        ; Setup parameters for call to function Single_Write
        MOV     R2,#0x1
        MOV     R1,#0x1c
        LCALL   ??Single_Write?relay
        LJMP    ?Subroutine10 & 0xFFFF
        CFI EndBlock cfiBlock25
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant int16 GetData(uint8)
GetData:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function GetData
        FUNCALL GetData, Single_Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GetData, Single_Read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        ; Setup parameters for call to function Single_Read
        LCALL   ??Single_Read?relay
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function Single_Read
        MOV     A,#0x1
        ADD     A,?V0 + 0
        MOV     R1,A
        LCALL   ??Single_Read?relay
        MOV     A,R1
        ADD     A,#0x0
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        SJMP    ??Subroutine12_0
        CFI EndBlock cfiBlock26

        RSEG BANKED_CODE:CODE:NOROOT(0)
// __banked_func __xdata_reentrant void lcd_printf(unsigned char *, int16)
lcd_printf:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function lcd_printf
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     C
        MOV     A,R5
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JNC     ??lcd_printf_0
        CLR     C
        CLR     A
        SUBB    A,R4
        MOV     R0,A
        CLR     A
        SUBB    A,R5
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,#0x2d
        SJMP    ??lcd_printf_1
??lcd_printf_0:
        MOV     A,#0x20
??lcd_printf_1:
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        INC     DPTR
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        INC     DPTR
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        INC     DPTR
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        ADD     A,#0x30
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R2
        ADD     A,#0x30
        MOVX    @DPTR,A
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        MOV     A,R0
        ADD     A,#0x30
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31
//   59 
//   60 /******************************************************************************
//   61  * CONSTANTS
//   62  */
//   63 #define REPORT_FAILURE_LIMIT                4
//   64 #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
//   65 
//   66 // Application States
//   67 #define APP_INIT                            0    // Initial state
//   68 #define APP_START                           1    // Sensor has joined network
//   69 #define APP_BIND                            2    // Sensor is in process of binding
//   70 #define APP_REPORT                          4    // Sensor is in reporting state
//   71 
//   72 // Application osal event identifiers
//   73 // Bit mask of events ( from 0x0000 to 0x00FF )
//   74 #define MY_START_EVT                        0x0001
//   75 #define MY_REPORT_EVT                       0x0002
//   76 #define MY_FIND_COLLECTOR_EVT               0x0004
//   77 
//   78 
//   79 
//   80 
//   81 // ADC definitions for CC2430/CC2530 from the hal_adc.c file
//   82 #if defined (HAL_MCU_CC2530)
//   83 #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
//   84 #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
//   85 #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
//   86 #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
//   87 #define HAL_ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
//   88 #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
//   89 #endif // HAL_MCU_CC2530
//   90 
//   91 /******************************************************************************
//   92  * TYPEDEFS
//   93  */
//   94 
//   95 /******************************************************************************
//   96  * LOCAL VARIABLES
//   97  */
//   98 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//   99 static uint8 appState =           APP_INIT;
appState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  100 static uint8 reportState =        FALSE;
reportState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  101 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  102 static uint8 reportFailureNr =    0;
reportFailureNr:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  103 
//  104 //static uint16 myReportPeriod =    2000;         // milliseconds

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  105 static uint16 myBindRetryDelay =  2000;         // milliseconds
myBindRetryDelay:
        DS 2
        REQUIRE `?<Initializer for myBindRetryDelay>`
        REQUIRE __INIT_XDATA_I
//  106 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  107 static uint16 parentShortAddr;
parentShortAddr:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  108 
//  109 /******************************************************************************
//  110  * GLOBAL VARIABLES
//  111  */
//  112 
//  113 // Inputs and Outputs for Sensor device
//  114 #define NUM_OUT_CMD_SENSOR                1
//  115 #define NUM_IN_CMD_SENSOR                 0
//  116 
//  117 // List of output and input commands for Sensor device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  118 const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
zb_OutCmdList:
        DW 2
//  119 {
//  120   SENSOR_REPORT_CMD_ID
//  121 };
//  122 
//  123 // Define SimpleDescriptor for Sensor device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  124 const SimpleDescriptionFormat_t zb_SimpleDesc =
zb_SimpleDesc:
        DB 2
        DW 3872, 1
        DB 1, 0
        DW 0H
        DB 1
        DW zb_OutCmdList
//  125 {
//  126   MY_ENDPOINT_ID,             //  Endpoint
//  127   MY_PROFILE_ID,              //  Profile ID
//  128   DEV_ID_SENSOR,              //  Device ID
//  129   DEVICE_VERSION_SENSOR,      //  Device Version
//  130   0,                          //  Reserved
//  131   NUM_IN_CMD_SENSOR,          //  Number of Input Commands
//  132   (cId_t *) NULL,             //  Input Command List
//  133   NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
//  134   (cId_t *) zb_OutCmdList     //  Output Command List
//  135 };
//  136 
//  137 
//  138 /******************************************************************************
//  139  * LOCAL FUNCTIONS
//  140  */
//  141 
//  142 void uartRxCB( uint8 port, uint8 event );
//  143 static void sendReport(uint8 *pkt);
//  144 static int8 readTemp(void);
//  145 static uint8 readVoltage(void);
//  146 bool filter(double new_value);
//  147 
//  148 /*****************************************************************************
//  149  * @fn          zb_HandleOsalEvent
//  150  *
//  151  * @brief       The zb_HandleOsalEvent function is called by the operating
//  152  *              system when a task event is set
//  153  *
//  154  * @param       event - Bitmask containing the events that have been set
//  155  *
//  156  * @return      none
//  157  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  158 void zb_HandleOsalEvent( uint16 event )
zb_HandleOsalEvent:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function zb_HandleOsalEvent
//  159 {
        FUNCALL zb_HandleOsalEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_StartRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_BindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_BindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  160   if(event & SYS_EVENT_MSG)
//  161   {
//  162     
//  163   }
//  164   
//  165   if( event & ZB_ENTRY_EVENT )
        MOV     A,#0x10
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??zb_HandleOsalEvent_0
        MOV     A,R1
??zb_HandleOsalEvent_0:
        JZ      ??zb_HandleOsalEvent_1
//  166   { 
//  167     // blind LED 1 to indicate joining a network
//  168     HalLedBlink ( HAL_LED_1, 0, 50, 500 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  169      
//  170     // Start the device 
//  171     zb_StartRequest();
        ; Setup parameters for call to function zb_StartRequest
        LCALL   ??zb_StartRequest?relay
//  172     
//  173   }
//  174   
//  175   if ( event & MY_REPORT_EVT )
//  176   {
//  177     if ( appState == APP_REPORT ) 
//  178     {
//  179       //sendReport();
//  180       //osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );//‘O÷√√ø2√Î∞lÀÕ ˝æ›*******************************
//  181     }
//  182   }
//  183   if ( event & MY_FIND_COLLECTOR_EVT )
??zb_HandleOsalEvent_1:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??zb_HandleOsalEvent_2
//  184   {
//  185     // Delete previous binding
//  186     if ( appState==APP_REPORT ) 
        MOV     DPTR,#appState
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??zb_HandleOsalEvent_3
//  187     {
//  188       zb_BindDevice( FALSE, SENSOR_REPORT_CMD_ID, (uint8 *)NULL );
        ; Setup parameters for call to function zb_BindDevice
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     R1,#0x0
        LCALL   ??zb_BindDevice?relay
//  189     }
//  190     
//  191     appState = APP_BIND;
??zb_HandleOsalEvent_3:
        MOV     A,#0x2
        MOV     DPTR,#appState
        MOVX    @DPTR,A
//  192     // blind LED 2 to indicate discovery and binding
//  193     HalLedBlink ( HAL_LED_2, 0, 50, 500 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,A
        LCALL   ??HalLedBlink?relay
//  194     
//  195     // Find and bind to a collector device
//  196     zb_BindDevice( TRUE, SENSOR_REPORT_CMD_ID, (uint8 *)NULL );
        ; Setup parameters for call to function zb_BindDevice
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     R1,#0x1
        LCALL   ??zb_BindDevice?relay
//  197   }
//  198 }
??zb_HandleOsalEvent_2:
        LJMP    ??Subroutine12_0 & 0xFFFF
        CFI EndBlock cfiBlock32
//  199 
//  200 /******************************************************************************
//  201  * @fn      zb_HandleKeys
//  202  *
//  203  * @brief   Handles all key events for this device.
//  204  *
//  205  * @param   shift - true if in shift/alt.
//  206  * @param   keys - bit field for key events. Valid entries:
//  207  *                 EVAL_SW4
//  208  *                 EVAL_SW3
//  209  *                 EVAL_SW2
//  210  *                 EVAL_SW1
//  211  *
//  212  * @return  none
//  213  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  214 void zb_HandleKeys( uint8 shift, uint8 keys )
zb_HandleKeys:
        CFI Block cfiBlock33 Using cfiCommon0
        CFI Function zb_HandleKeys
//  215 {
        FUNCALL zb_HandleKeys, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  216   // Shift is used to make each button/switch dual purpose.
//  217   if ( shift )
        MOV     A,R1
        JNZ     ??zb_HandleKeys_0
//  218   {
//  219     if ( keys & HAL_KEY_SW_1 )
//  220     {
//  221     }
//  222     if ( keys & HAL_KEY_SW_2 )
//  223     {
//  224     }
//  225     if ( keys & HAL_KEY_SW_3 )
//  226     {
//  227     }
//  228     if ( keys & HAL_KEY_SW_4 )
//  229     {
//  230     }
//  231   }
//  232   else
//  233   {
//  234     if ( keys & HAL_KEY_SW_1 )
//  235     {
//  236     }
//  237     if ( keys & HAL_KEY_SW_2 )
//  238     {
//  239     }
//  240     if ( keys & HAL_KEY_SW_3 )
        MOV     A,R2
        MOV     C,0xE0 /* A   */.4
        JNC     ??zb_HandleKeys_0
//  241     {
//  242       // Start reporting
//  243       osal_set_event( sapi_TaskID, MY_REPORT_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        LCALL   ??Subroutine13_0 & 0xFFFF
//  244       reportState = TRUE;
??CrossCallReturnLabel_26:
        MOV     A,#0x1
        MOV     DPTR,#reportState
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock33
//  245     }
//  246     if ( keys & HAL_KEY_SW_4 )
//  247     {
//  248     }
//  249   }
//  250 }
??zb_HandleKeys_0:
        REQUIRE ?Subroutine10
        ; // Fall through to label ?Subroutine10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiBlock34 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock34
//  251 
//  252 /******************************************************************************
//  253  * @fn          zb_StartConfirm
//  254  *
//  255  * @brief       The zb_StartConfirm callback is called by the ZigBee stack
//  256  *              after a start request operation completes
//  257  *
//  258  * @param       status - The status of the start operation.  Status of
//  259  *                       ZB_SUCCESS indicates the start operation completed
//  260  *                       successfully.  Else the status is an error code.
//  261  *
//  262  * @return      none
//  263  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  264 void zb_StartConfirm( uint8 status )
zb_StartConfirm:
        CFI Block cfiBlock35 Using cfiCommon0
        CFI Function zb_StartConfirm
//  265 {
        FUNCALL zb_StartConfirm, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, HalLcdWriteString
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, InitMPU6050
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, zb_GetDeviceInfo
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  266   // If the device sucessfully started, change state to running
//  267   if ( status == ZB_SUCCESS ) 
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_24
//  268   {
//  269     // Change application state
//  270     appState = APP_START;
        MOV     A,#0x1
        MOV     DPTR,#appState
        MOVX    @DPTR,A
//  271     
//  272     // Set LED 1 to indicate that node is operational on the network
//  273     HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,A
        LCALL   ??HalLedSet?relay
//  274     
//  275     // Update the display
//  276     #if defined ( LCD_SUPPORTED )
//  277     HalLcdWriteString( "SensorDemo", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#(`?<Constant "SensorDemo">` & 0xff)
        MOV     R3,#((`?<Constant "SensorDemo">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  278     HalLcdWriteString( "Sensor", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#(`?<Constant "Sensor">` & 0xff)
        MOV     R3,#((`?<Constant "Sensor">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  279     #endif
//  280     InitMPU6050();//≥ı ºªØMPU6050********************************************************
        ; Setup parameters for call to function InitMPU6050
        LCALL   ??InitMPU6050?relay
//  281     // Store parent short address
//  282     zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
        ; Setup parameters for call to function zb_GetDeviceInfo
        MOV     R2,#(parentShortAddr & 0xff)
        MOV     R3,#((parentShortAddr >> 8) & 0xff)
        MOV     R1,#0x3
        LCALL   ??zb_GetDeviceInfo?relay
//  283     
//  284     // Set event to bind to a collector
//  285     osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );  
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine6 & 0xFFFF
//  286   }
//  287 }
??CrossCallReturnLabel_24:
        SJMP    ?Subroutine10
        CFI EndBlock cfiBlock35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond37) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond37) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond37) CFA_SP SP+-5
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOV     R2,#0x4
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_26
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond40) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond40) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond40) CFA_SP SP+-5
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond41) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond41) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond41) CFA_SP SP+-5
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42
//  288 
//  289 /******************************************************************************
//  290  * @fn          zb_SendDataConfirm
//  291  *
//  292  * @brief       The zb_SendDataConfirm callback function is called by the
//  293  *              ZigBee after a send data operation completes
//  294  *
//  295  * @param       handle - The handle identifying the data transmission.
//  296  *              status - The status of the operation.
//  297  *
//  298  * @return      none
//  299  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  300 void zb_SendDataConfirm( uint8 handle, uint8 status )
zb_SendDataConfirm:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI Function zb_SendDataConfirm
//  301 {
        FUNCALL zb_SendDataConfirm, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataConfirm, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  302   if(status != ZB_SUCCESS) 
        MOV     A,R2
        JZ      ??CrossCallReturnLabel_25
//  303   {
//  304     if ( ++reportFailureNr >= REPORT_FAILURE_LIMIT ) 
        MOV     DPTR,#reportFailureNr
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x4
        JC      ??zb_SendDataConfirm_0
//  305     {
//  306        // Stop reporting
//  307        osal_stop_timerEx( sapi_TaskID, MY_REPORT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  308        
//  309        // After failure reporting start automatically when the device
//  310        // is binded to a new gateway
//  311        reportState=TRUE;
        MOV     A,#0x1
        MOV     DPTR,#reportState
        MOVX    @DPTR,A
//  312         
//  313        // Try binding to a new gateway
//  314        osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine6 & 0xFFFF
//  315        reportFailureNr=0;
//  316     }
//  317   }
//  318   // status == SUCCESS
//  319   else 
//  320   {
//  321     // Reset failure counter
//  322     reportFailureNr=0;
??CrossCallReturnLabel_25:
        CLR     A
        MOV     DPTR,#reportFailureNr
        MOVX    @DPTR,A
//  323   }
//  324 }
??zb_SendDataConfirm_0:
        SJMP    ?Subroutine10
        CFI EndBlock cfiBlock43
//  325 
//  326 /******************************************************************************
//  327  * @fn          zb_BindConfirm
//  328  *
//  329  * @brief       The zb_BindConfirm callback is called by the ZigBee stack
//  330  *              after a bind operation completes.
//  331  *
//  332  * @param       commandId - The command ID of the binding being confirmed.
//  333  *              status - The status of the bind operation.
//  334  *
//  335  * @return      none
//  336  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  337 void zb_BindConfirm( uint16 commandId, uint8 status )
zb_BindConfirm:
        CFI Block cfiBlock44 Using cfiCommon0
        CFI Function zb_BindConfirm
//  338 {
        FUNCALL zb_BindConfirm, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  339   if( status == ZB_SUCCESS )
        MOV     A,R1
        JNZ     ??zb_BindConfirm_0
//  340   {   
//  341     appState = APP_REPORT;
        MOV     A,#0x4
        MOV     DPTR,#appState
        MOVX    @DPTR,A
//  342     HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
        SJMP    ??zb_BindConfirm_1
//  343     
//  344     // After failure reporting start automatically when the device
//  345     // is binded to a new gateway
//  346   /*  if ( reportState ) 
//  347     {
//  348       // Start reporting
//  349      // osal_set_event( sapi_TaskID, MY_REPORT_EVT );***************************************************************
//  350     }*/
//  351   }
//  352   else
//  353   {
//  354     osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
??zb_BindConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myBindRetryDelay
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#0x4
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  355   }
//  356 }
??zb_BindConfirm_1:
        LJMP    ?Subroutine10 & 0xFFFF
        CFI EndBlock cfiBlock44
//  357 
//  358 /******************************************************************************
//  359  * @fn          zb_AllowBindConfirm
//  360  *
//  361  * @brief       Indicates when another device attempted to bind to this device
//  362  *
//  363  * @param
//  364  *
//  365  * @return      none
//  366  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  367 void zb_AllowBindConfirm( uint16 source )
zb_AllowBindConfirm:
        CFI Block cfiBlock45 Using cfiCommon0
        CFI Function zb_AllowBindConfirm
//  368 {
        ; Saved register size: 0
        ; Auto size: 0
//  369 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock45
//  370 
//  371 /******************************************************************************
//  372  * @fn          zb_FindDeviceConfirm
//  373  *
//  374  * @brief       The zb_FindDeviceConfirm callback function is called by the
//  375  *              ZigBee stack when a find device operation completes.
//  376  *
//  377  * @param       searchType - The type of search that was performed.
//  378  *              searchKey - Value that the search was executed on.
//  379  *              result - The result of the search.
//  380  *
//  381  * @return      none
//  382  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  383 void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
zb_FindDeviceConfirm:
        CFI Block cfiBlock46 Using cfiCommon0
        CFI Function zb_FindDeviceConfirm
//  384 {
        ; Saved register size: 0
        ; Auto size: 0
//  385 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock46
//  386 
//  387 /******************************************************************************
//  388  * @fn          zb_ReceiveDataIndication
//  389  *
//  390  * @brief       The zb_ReceiveDataIndication callback function is called
//  391  *              asynchronously by the ZigBee stack to notify the application
//  392  *              when data is received from a peer device.
//  393  *
//  394  * @param       source - The short address of the peer device that sent the data
//  395  *              command - The commandId associated with the data
//  396  *              len - The number of bytes in the pData parameter
//  397  *              pData - The data sent by the peer device
//  398  *
//  399  * @return      none
//  400  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  401 void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData)
zb_ReceiveDataIndication:
        CFI Block cfiBlock47 Using cfiCommon0
        CFI Function zb_ReceiveDataIndication
//  402 {
        FUNCALL zb_ReceiveDataIndication, sendReport
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
//  403   
//  404    sendReport(pData);//∞lÀÕ ˝æ›********************************************************************************************
        ; Setup parameters for call to function sendReport
        LCALL   ??sendReport?relay
//  405 
//  406 }
        LJMP    ?Subroutine10 & 0xFFFF
        CFI EndBlock cfiBlock47
//  407 
//  408 /******************************************************************************
//  409  * @fn          uartRxCB
//  410  *
//  411  * @brief       Callback function for UART 
//  412  *
//  413  * @param       port - UART port
//  414  *              event - UART event that caused callback 
//  415  *
//  416  * @return      none
//  417  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  418 void uartRxCB( uint8 port, uint8 event )
uartRxCB:
        CFI Block cfiBlock48 Using cfiCommon0
        CFI Function uartRxCB
//  419 {
        ; Saved register size: 0
        ; Auto size: 0
//  420 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock48
//  421 
//  422 /******************************************************************************
//  423  * @fn          sendReport
//  424  *
//  425  * @brief       Send sensor report
//  426  *
//  427  * @param       none
//  428  *              
//  429  * @return      none
//  430  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  431 static void sendReport(uint8 *pkt)
sendReport:
        CFI Block cfiBlock49 Using cfiCommon0
        CFI Function sendReport
//  432 {
        FUNCALL sendReport, GetData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, lcd_printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, GetData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, lcd_printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, GetData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, lcd_printf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, GetData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, GetData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, GetData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, sqrt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, atan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, filter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendReport, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
//  433   uint8 pData[SENSOR_REPORT_LENGTH];
//  434   static uint8 reportNr=0;
//  435   uint8 txOptions;
//  436   int16 temp;
//  437   
//  438   
//  439         pData[sign]=0x01;//±Í÷æŒª**************************************************************************************************
        MOV     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  440         pData[sign+1]=0x00;//********************‘› ±√ª”√µΩµƒ ˝æ›Œª£¨∫Û∆⁄ø…¿©’π***************************************************
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  441         temp=GetData(ACCEL_XOUT_H)-ACCEL_XOUT_H_offset;
        ; Setup parameters for call to function GetData
        MOV     R1,#0x3b
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     A,#-0x57
        ADD     A,?V0 + 0
        MOV     R4,A
        MOV     A,#-0x2
        LCALL   ??Subroutine14_0 & 0xFFFF
//  442         pData[SENSOR_ACCEL_XOUT_H_OFFSET]=  HI_UINT16(temp);
??CrossCallReturnLabel_29:
        LCALL   ?SS_SHR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  443         pData[SENSOR_ACCEL_XOUT_H_OFFSET+1]=  LO_UINT16(temp);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  444         lcd_printf(dis,temp);
//  445         HalLcdWriteString( dis, HAL_LCD_LINE_2 );
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#(dis & 0xff)
        MOV     R3,#((dis >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  446         
//  447         temp=GetData(ACCEL_YOUT_H)-ACCEL_YOUT_H_offset;
        ; Setup parameters for call to function GetData
        MOV     R1,#0x3d
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_16:
        MOV     A,#-0x66
        ADD     A,?V0 + 0
        MOV     R4,A
        CLR     A
        LCALL   ??Subroutine14_0 & 0xFFFF
//  448         pData[SENSOR_ACCEL_YOUT_H_OFFSET]=  HI_UINT16(temp);
??CrossCallReturnLabel_30:
        LCALL   ?SS_SHR
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  449         pData[SENSOR_ACCEL_YOUT_H_OFFSET+1] =  LO_UINT16(temp);
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  450                 lcd_printf(dis,temp);
//  451         HalLcdWriteString( dis, HAL_LCD_LINE_3 );
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#(dis & 0xff)
        MOV     R3,#((dis >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  452 
//  453         temp=GetData(ACCEL_ZOUT_H)-ACCEL_ZOUT_H_offset;
        ; Setup parameters for call to function GetData
        MOV     R1,#0x3f
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_17:
        MOV     A,#-0x2e
        ADD     A,?V0 + 0
        MOV     R4,A
        MOV     A,#-0x3
        LCALL   ??Subroutine14_0 & 0xFFFF
//  454         pData[SENSOR_ACCEL_ZOUT_H_OFFSET]=  HI_UINT16(temp);
??CrossCallReturnLabel_31:
        LCALL   ?SS_SHR
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  455         pData[SENSOR_ACCEL_ZOUT_H_OFFSET+1] =  LO_UINT16(temp);
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
//  456                 lcd_printf(dis,temp);
//  457         HalLcdWriteString( dis, HAL_LCD_LINE_4 );
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#(dis & 0xff)
        MOV     R3,#((dis >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  458 
//  459         temp=GetData(GYRO_XOUT_H)-GYRO_XOUT_H_offset;
        ; Setup parameters for call to function GetData
        MOV     R1,#0x43
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     A,#0xe
        ADD     A,?V0 + 0
        MOV     R4,A
        CLR     A
        LCALL   ??Subroutine14_0 & 0xFFFF
//  460         pData[SENSOR_GYRO_XOUT_H_OFFSET]=  HI_UINT16(temp);
??CrossCallReturnLabel_32:
        LCALL   ?SS_SHR
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  461         pData[SENSOR_GYRO_XOUT_H_OFFSET+1] =  LO_UINT16(temp);
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
//  462 
//  463         temp=GetData(GYRO_YOUT_H)-GYRO_YOUT_H_offset;
        ; Setup parameters for call to function GetData
        MOV     R1,#0x45
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     A,#-0x15
        LCALL   ?Subroutine7 & 0xFFFF
//  464         pData[SENSOR_GYRO_YOUT_H_OFFSET]=  HI_UINT16(temp);
??CrossCallReturnLabel_27:
        LCALL   ?SS_SHR
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  465         pData[SENSOR_GYRO_YOUT_H_OFFSET+1] =  LO_UINT16(temp);
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
//  466 
//  467         temp=GetData(GYRO_ZOUT_H)-GYRO_ZOUT_H_offset;
        ; Setup parameters for call to function GetData
        MOV     R1,#0x47
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     A,#-0x1
        LCALL   ?Subroutine7 & 0xFFFF
//  468         pData[SENSOR_GYRO_ZOUT_H_OFFSET]=  HI_UINT16(temp);
??CrossCallReturnLabel_28:
        LCALL   ?SS_SHR
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  469         pData[SENSOR_GYRO_ZOUT_H_OFFSET+1] =  LO_UINT16(temp);
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
//  470  
//  471   //µ»¥˝–ﬁ∏ƒ**********************************************
//  472   
//  473   
//  474   
//  475         pData[SENSOR_PARENT_OFFSET] =  HI_UINT16(parentShortAddr);
        MOV     DPTR,#(parentShortAddr + 1)
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  476         pData[SENSOR_PARENT_OFFSET + 1] =  LO_UINT16(parentShortAddr);
        MOV     DPTR,#parentShortAddr
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  477   
//  478   
//  479         int ACCEL_XOUT;
//  480         int ACCEL_YOUT;
//  481         int ACCEL_ZOUT;
//  482         ACCEL_XOUT = (pData[SENSOR_ACCEL_XOUT_H_OFFSET] << 8) +pData[SENSOR_ACCEL_XOUT_H_OFFSET+1];
//  483         ACCEL_YOUT = (pData[SENSOR_ACCEL_YOUT_H_OFFSET] << 8) +pData[SENSOR_ACCEL_YOUT_H_OFFSET+1];
//  484         ACCEL_ZOUT = (pData[SENSOR_ACCEL_ZOUT_H_OFFSET] << 8) +pData[SENSOR_ACCEL_ZOUT_H_OFFSET+1];
//  485         if (ACCEL_XOUT >= 32768)
//  486          {
//  487              ACCEL_XOUT -= 65536;
//  488          }
//  489          if (ACCEL_YOUT >= 32768)
//  490           {
//  491             ACCEL_YOUT -= 65536;
//  492            }
//  493           if (ACCEL_ZOUT >= 32768)
//  494           {
//  495             ACCEL_ZOUT -= 65536;
//  496            }
//  497           double ACCEL_X = ACCEL_XOUT / 16384.0 * 9.8;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 8
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_46800000
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_DIV
        MOV     DPTR,#__Constant_411ccccd
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
//  498           double ACCEL_Y = ACCEL_YOUT / 16384.0 * 9.8;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_46800000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
        MOV     DPTR,#__Constant_411ccccd
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
//  499           double ACCEL_Z = ACCEL_ZOUT / 16384.0 * 9.8;
//  500           double ANGLEZ = atan(sqrt(ACCEL_Y * ACCEL_Y + ACCEL_X * ACCEL_X) / ACCEL_Z) * 180 / 3.1415926535;
        ; Setup parameters for call to function atan
        ; Setup parameters for call to function sqrt
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,?V0 + 2
        MOV     ?V0 + 7,?V0 + 3
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_MUL
        MOV     ?V0 + 0,?V0 + 8
        MOV     ?V0 + 1,?V0 + 9
        MOV     ?V0 + 2,?V0 + 10
        MOV     ?V0 + 3,?V0 + 11
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_ADD
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   ??sqrt?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine0 & 0xFFFF
??CrossCallReturnLabel_1:
        LCALL   ?L_TO_FLT
        MOV     DPTR,#__Constant_46800000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_DIV
        MOV     DPTR,#__Constant_411ccccd
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_MUL
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_DIV
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   ??atan?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#__Constant_43340000
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_MUL
        MOV     DPTR,#__Constant_40490fdb
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_DIV
//  501     
//  502   
//  503   
//  504   // Set ACK request on each ACK_INTERVAL report
//  505   // If a report failed, set ACK request on next report
//  506   if ( ++reportNr<ACK_REQ_INTERVAL && reportFailureNr==0 ) 
        MOV     DPTR,#??reportNr
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x5
        JNC     ??sendReport_0
        MOV     DPTR,#reportFailureNr
        MOVX    A,@DPTR
        JNZ     ??sendReport_0
//  507   {
//  508     txOptions = AF_TX_OPTIONS_NONE;
        MOV     R6,#0x0
        SJMP    ??sendReport_1
//  509   }
//  510   else 
//  511   {
//  512     txOptions = AF_MSG_ACK_REQUEST;
??sendReport_0:
        MOV     R6,#0x10
//  513     reportNr = 0;
        CLR     A
        MOV     DPTR,#??reportNr
        MOVX    @DPTR,A
//  514   }
//  515   // Destination address 0xFFFE: Destination address is sent to previously
//  516   // established binding for the commandId.
//  517   if(filter(ANGLEZ)){
??sendReport_1:
        ; Setup parameters for call to function filter
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   ??filter?relay
        MOV     A,R1
        JZ      ??sendReport_2
//  518         zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, SENSOR_REPORT_LENGTH, pData, 0, txOptions, 0 ); 
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,R6
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     R1,#0x10
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x2
        MOV     R3,#-0x1
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 36)
//  519   }
//  520 }
??sendReport_2:
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond51) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond51) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond51) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond51) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond51) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        LCALL   ??GetData?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        RET
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        ADD     A,?V0 + 0
        MOV     R4,A
        MOV     A,#-0x1
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_31
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond63) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond63) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond63) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond63) CFA_SP SP+0
        CFI (cfiCond63) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond64 Using cfiCommon0
        CFI (cfiCond64) NoFunction
        CFI (cfiCond64) Conditional ??CrossCallReturnLabel_27
        CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond64) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond64) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond64) CFA_SP SP+0
        CFI (cfiCond64) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker66 Using cfiCommon1
        CFI (cfiPicker66) NoFunction
        CFI (cfiPicker66) Picker
        ADDC    A,?V0 + 1
        MOV     R5,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0x8
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond67 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        MOV     A,R4
        MOVX    @DPTR,A
        ; Setup parameters for call to function lcd_printf
        ; Setup parameters for call to function lcd_printf
        ; Setup parameters for call to function lcd_printf
        MOV     R2,#(dis & 0xff)
        MOV     R3,#((dis >> 8) & 0xff)
        LCALL   ??lcd_printf?relay
        RET
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 36)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 36)
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        MOVX    A,@DPTR
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73

        RSEG XDATA_Z:XDATA:NOROOT(0)
??reportNr:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  521 
//  522 /******************************************************************************
//  523  * @fn          readTemp
//  524  *
//  525  * @brief       read temperature from ADC
//  526  *
//  527  * @param       none
//  528  *              
//  529  * @return      temperature
//  530  */
//  531 static int8 readTemp(void)
//  532 {
//  533   static uint16 voltageAtTemp22;
//  534   static uint8 bCalibrate=TRUE; // Calibrate the first time the temp sensor is read
//  535   uint16 value;
//  536   int8 temp;
//  537 
//  538   #if defined (HAL_MCU_CC2530)
//  539   ATEST = 0x01;
//  540   TR0  |= 0x01; 
//  541   
//  542   /* Clear ADC interrupt flag */
//  543   ADCIF = 0;
//  544 
//  545   ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_512 | HAL_ADC_CHN_TEMP);
//  546 
//  547   /* Wait for the conversion to finish */
//  548   while ( !ADCIF );
//  549 
//  550   /* Get the result */
//  551   value = ADCL;
//  552   value |= ((uint16) ADCH) << 8;
//  553 
//  554   // Use the 12 MSB of adcValue
//  555   value >>= 4;
//  556   
//  557   /*
//  558    * These parameters are typical values and need to be calibrated
//  559    * See the datasheet for the appropriate chip for more details
//  560    * also, the math below may not be very accurate
//  561    */
//  562     /* Assume ADC = 1480 at 25C and ADC = 4/C */
//  563   #define VOLTAGE_AT_TEMP_25        1480
//  564   #define TEMP_COEFFICIENT          4
//  565 
//  566   // Calibrate for 22C the first time the temp sensor is read.
//  567   // This will assume that the demo is started up in temperature of 22C
//  568   if(bCalibrate) {
//  569     voltageAtTemp22=value;
//  570     bCalibrate=FALSE;
//  571   }
//  572   
//  573   temp = 22 + ( (value - voltageAtTemp22) / TEMP_COEFFICIENT );
//  574   
//  575   // Set 0C as minimum temperature, and 100C as max
//  576   if( temp >= 100) 
//  577   {
//  578     return 100;
//  579   }
//  580   else if (temp <= 0) {
//  581     return 0;
//  582   }
//  583   else { 
//  584     return temp;
//  585   }
//  586   // Only CC2530 is supported
//  587   #else
//  588   return 0;
//  589   #endif
//  590 }
//  591 
//  592 /******************************************************************************
//  593  * @fn          readVoltage
//  594  *
//  595  * @brief       read voltage from ADC
//  596  *
//  597  * @param       none
//  598  *              
//  599  * @return      voltage
//  600  */
//  601 static uint8 readVoltage(void)
//  602 {
//  603   #if defined (HAL_MCU_CC2530)
//  604   uint16 value;
//  605 
//  606   // Clear ADC interrupt flag 
//  607   ADCIF = 0;
//  608 
//  609   ADCCON3 = (HAL_ADC_REF_125V | HAL_ADC_DEC_128 | HAL_ADC_CHN_VDD3);
//  610 
//  611   // Wait for the conversion to finish 
//  612   while ( !ADCIF );
//  613 
//  614   // Get the result
//  615   value = ADCL;
//  616   value |= ((uint16) ADCH) << 8;
//  617 
//  618   
//  619   // value now contains measurement of Vdd/3
//  620   // 0 indicates 0V and 32767 indicates 1.25V
//  621   // voltage = (value*3*1.25)/32767 volts
//  622   // we will multiply by this by 10 to allow units of 0.1 volts
//  623   value = value >> 6;   // divide first by 2^6
//  624   value = (uint16)(value * 37.5);
//  625   value = value >> 9;   // ...and later by 2^9...to prevent overflow during multiplication
//  626 
//  627   return value;
//  628   #else
//  629   return 0;
//  630   #endif // CC2530
//  631 }
//  632 
//  633     /*  
//  634     ≤‚¡ø…ΩÃÂµƒŒ»∂®∆¬∂»£¨
//  635     œﬁ∑˘¬À≤®£¨A÷µø…∏˘æ› µº «Èøˆµ˜’˚£¨π˝¬À≤ª’˝≥£µƒ ˝æ›
//  636     valueŒ™”––ß÷µ£¨new_valueŒ™µ±«∞≤…—˘÷µ  
//  637     ¬À≤®≥Ã–Ú∑µªÿ”––ßµƒ µº ÷µ  
//  638     */
//  639 
//  640     /*
//  641     ¥´»Î≤Œ ˝£∫new_valueº¥«„–±Ω«¥´∏–∆˜◊Ó–¬µƒ ˝æ›£®uint8£©
//  642     ∑µªÿ≤Œ ˝£∫trueªÚfalse(boolean)
//  643     */
//  644 

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  645     double a=0.8; //∂®“Â◊Ó¥Û≤Ó÷µ
`a`:
        DS 4
        REQUIRE `?<Initializer for a>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  646     double Fvalue;//º«¬º…œ¡Ω¥Œµƒ ˝æ›£¨√ø¥Œ∏¸–¬
Fvalue:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  647     double Svalue;//º«¬º…œ“ª¥Œµƒ ˝æ›£¨√ø¥Œ∏¸–¬
Svalue:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  648     

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  649     bool filter(double new_value)
filter:
        CFI Block cfiBlock74 Using cfiCommon0
        CFI Function filter
//  650     {
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  651           if(Fvalue==0||Svalue==0)
        MOV     DPTR,#Fvalue
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_EQ
        JZ      ??filter_0
        MOV     DPTR,#Svalue
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_EQ
        JNZ     ??filter_1
//  652           {
//  653             Fvalue=Svalue;//∏¸–¬ ˝æ›
??filter_0:
        MOV     DPTR,#Svalue
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#Fvalue
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  654             Svalue=new_value;//∏¸–¬ ˝æ›
        MOV     DPTR,#Svalue
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  655             return true; 
        MOV     R1,#0x1
        LJMP    ??filter_2 & 0xFFFF
//  656           }
//  657           else
//  658           {
//  659             if ( ( new_value - Svalue > a ) || ( Svalue - new_value > a )) //≈–∂œ∏˙…œ“ª¥Œµƒ≤Ó÷µ
??filter_1:
        MOV     DPTR,#`a`
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#Svalue
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_LT
        JC      ??filter_3
        MOV     DPTR,#`a`
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#Svalue
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_LT
        JNC     ??filter_0
//  660             {
//  661                 if(( new_value - Fvalue > a ) || ( Fvalue - new_value > a ))//ºŸ…Ë ‹µΩ∏…»≈£¨‘Ÿ”Î…œ…œ¥Œµƒ ˝æ›◊ˆ±»Ωœ
??filter_3:
        MOV     DPTR,#`a`
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     DPTR,#Fvalue
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 0
        LCALL   ?FLT_LT
        JC      ??filter_4
        MOV     DPTR,#`a`
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#Fvalue
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_SUB
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_LT
        JC      $+5
        LJMP    ??filter_0 & 0xFFFF
//  662                     {
//  663                         Fvalue=Svalue;    //∏¸–¬ ˝æ›
??filter_4:
        MOV     DPTR,#Svalue
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#Fvalue
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  664                         Svalue=new_value; //∏¸–¬ ˝æ›
        MOV     DPTR,#Svalue
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  665                         return false;
        MOV     R1,#0x0
??filter_2:
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock74
//  666                     }
//  667                 else
//  668                     {
//  669                         Fvalue=Svalue;     //∏¸–¬ ˝æ›
//  670                         Svalue=new_value;  //∏¸–¬ ˝æ›
//  671                         return true; 
//  672                     }
//  673             }
//  674             else
//  675             {
//  676                     Fvalue=Svalue;//∏¸–¬ ˝æ›
//  677                     Svalue=new_value;//∏¸–¬ ˝æ›
//  678                     return true;    
//  679             }
//  680           }
//  681          
//  682     }

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for myBindRetryDelay>`:
        DW 2000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for a>`:
        DD 3F4CCCCDH

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??NOP?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    `NOP`

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Start?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Start

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Stop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Stop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendACK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RecvACK?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RecvACK

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??RecvByte?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    RecvByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Single_Write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Single_Write

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Single_Read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Single_Read

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??InitMPU6050?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    InitMPU6050

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??lcd_printf?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    lcd_printf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleOsalEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleOsalEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_StartConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_StartConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_SendDataConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_SendDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_BindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_BindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_AllowBindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_AllowBindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_FindDeviceConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_FindDeviceConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_ReceiveDataIndication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_ReceiveDataIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??uartRxCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    uartRxCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sendReport?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    sendReport

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??filter?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    filter

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "SensorDemo">`:
        DB "SensorDemo"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "Sensor">`:
        DB "Sensor"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_46800000:
        DD 46800000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_411ccccd:
        DD 411CCCCDH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_43340000:
        DD 43340000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_40490fdb:
        DD 40490FDBH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
__Constant_0:
        DD 0H

        END
//  683     
// 
// 1 863 bytes in segment BANKED_CODE
//   138 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//     6 bytes in segment XDATA_I
//     6 bytes in segment XDATA_ID
//    52 bytes in segment XDATA_ROM_C
//    21 bytes in segment XDATA_Z
// 
// 2 007 bytes of CODE  memory
//    32 bytes of CONST memory (+ 20 bytes shared)
//     0 bytes of DATA  memory (+  2 bytes shared)
//    27 bytes of XDATA memory
//
//Errors: none
//Warnings: 9
