///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V7.51A/W32 for 8051               26/May/2015  12:49:06 /
// Copyright 2004-2009 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\Sourc /
//                          e\DemoCollector.c                                 /
//    Command line       =  -f "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\C /
//                          C2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg"     /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC25 /
//                          30DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"       /
//                          (-DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR     /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Texas                  /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SensorDemo«„–±Ω«+GPRS\Source\DemoCol /
//                          lector.c" -D ZIGBEEPRO -D HOLD_AUTO_START -D      /
//                          BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D      /
//                          NV_RESTORE -D ZTOOL_P1 -D MT_TASK -D              /
//                          DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ROUTER -D       /
//                          LCD_SUPPORTED -D MY_TYPE_COLLECTOR -lC "C:\Texas  /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SensorDemo«„–±Ω«+GPRS\CC2530DB\Colle /
//                          ctorEB-PRO\List\" -lA "C:\Texas                   /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SensorDemo«„–±Ω«+GPRS\CC2530DB\Colle /
//                          ctorEB-PRO\List\" --diag_suppress Pe001,Pa010 -o  /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC25 /
//                          30DB\CollectorEB-PRO\Obj\" -e                     /
//                          --require_prototypes --debug --core=plain         /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "C:\Texas                 /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SensorDemo«„–±Ω«+GPRS\CC2530DB\" -I  /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC25 /
//                          30DB\..\SOURCE\" -I "C:\Texas                     /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SensorDemo«„–±Ω«+GPRS\CC2530DB\..\.. /
//                          \..\ZMAIN\TI2530DB\" -I "C:\Texas                 /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SensorDemo«„–±Ω«+GPRS\CC2530DB\..\.. /
//                          \..\..\..\COMPONENTS\MT\" -I "C:\Texas            /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SensorDemo«„–±Ω«+GPRS\CC2530DB\..\.. /
//                          \..\..\..\COMPONENTS\HAL\INCLUDE\" -I "C:\Texas   /
//                          Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SensorDemo«„–±Ω«+GPRS\CC2530DB\..\.. /
//                          \..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I     /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC25 /
//                          30DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\"   /
//                          -I "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\C /
//                          C2530DB\..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\"  /
//                          -I "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\C /
//                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\AF\" -I   /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC25 /
//                          30DB\..\..\..\..\..\COMPONENTS\STACK\NWK\" -I     /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC25 /
//                          30DB\..\..\..\..\..\COMPONENTS\STACK\SEC\" -I     /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC25 /
//                          30DB\..\..\..\..\..\COMPONENTS\STACK\SAPI\" -I    /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC25 /
//                          30DB\..\..\..\..\..\COMPONENTS\STACK\SYS\" -I     /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC25 /
//                          30DB\..\..\..\..\..\COMPONENTS\STACK\ZDO\" -I     /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC25 /
//                          30DB\..\..\..\..\..\COMPONENTS\ZMAC\F8W\" -I      /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC25 /
//                          30DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I          /
//                          "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC25 /
//                          30DB\..\..\..\..\..\COMPONENTS\SERVICES\SADDR\"   /
//                          -I "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4. /
//                          0\Projects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\C /
//                          C2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ /
//                          " -I "C:\Texas Instruments\ZStack-CC2530-2.3.0-1. /
//                          4.0\Projects\zstack\Samples\SensorDemo«„–±Ω«+GPRS /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\MAC\INCLUDE\" /
//                           -I "C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4 /
//                          .0\Projects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\ /
//                          CC2530DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL /
//                          \" -I "C:\Texas Instruments\ZStack-CC2530-2.3.0-1 /
//                          .4.0\Projects\zstack\Samples\SensorDemo«„–±Ω«+GPR /
//                          S\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVE /
//                          L\srf04\" -I "C:\Texas Instruments\ZStack-CC2530- /
//                          2.3.0-1.4.0\Projects\zstack\Samples\SensorDemo«„– /
//                          ±Ω«+GPRS\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\L /
//                          OW_LEVEL\srf04\SINGLE_CHIP\" -I "C:\Program       /
//                          Files\IAR Systems\Embedded Workbench              /
//                          5.3\8051\INC\" -I "C:\Program Files\IAR           /
//                          Systems\Embedded Workbench 5.3\8051\INC\CLIB\"    /
//                          -Ohz                                              /
//    List file          =  C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Pr /
//                          ojects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\CC253 /
//                          0DB\CollectorEB-PRO\List\DemoCollector.s51        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME DemoCollector

        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ??calcFCS?relay
        EXTERN ??hex_2_ascii?relay
        EXTERN ??sendGtwReport?relay
        EXTERN ??uartRxCB?relay
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??calcFCS?relay,0203H
        PUBLIC ??hex_2_ascii?relay
        FUNCTION ??hex_2_ascii?relay,0203H
        FUNCTION ??sendGtwReport?relay,0203H
        PUBLIC ??uartRxCB?relay
        FUNCTION ??uartRxCB?relay,0203H
        PUBLIC ??zb_AllowBindConfirm?relay
        FUNCTION ??zb_AllowBindConfirm?relay,0203H
        PUBLIC ??zb_BindConfirm?relay
        FUNCTION ??zb_BindConfirm?relay,0203H
        PUBLIC ??zb_FindDeviceConfirm?relay
        FUNCTION ??zb_FindDeviceConfirm?relay,0203H
        PUBLIC ??zb_HandleKeys?relay
        FUNCTION ??zb_HandleKeys?relay,0203H
        PUBLIC ??zb_HandleOsalEvent?relay
        FUNCTION ??zb_HandleOsalEvent?relay,0203H
        PUBLIC ??zb_ReceiveDataIndication?relay
        FUNCTION ??zb_ReceiveDataIndication?relay,0203H
        PUBLIC ??zb_SendDataConfirm?relay
        FUNCTION ??zb_SendDataConfirm?relay,0203H
        PUBLIC ??zb_StartConfirm?relay
        FUNCTION ??zb_StartConfirm?relay,0203H
        PUBLIC COMM
        PUBLIC END
        PUBWEAK P1DIR
        PUBWEAK _A_P1
        FUNCTION calcFCS,0203H
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC hex_2_ascii
        FUNCTION hex_2_ascii,0203H
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 33, STACK
        FUNCTION sendGtwReport,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 69, STACK
        PUBLIC uartRxCB
        FUNCTION uartRxCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 145, STACK
        PUBLIC zb_AllowBindConfirm
        FUNCTION zb_AllowBindConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_BindConfirm
        FUNCTION zb_BindConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zb_FindDeviceConfirm
        FUNCTION zb_FindDeviceConfirm,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zb_HandleKeys
        FUNCTION zb_HandleKeys,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zb_HandleOsalEvent
        FUNCTION zb_HandleOsalEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC zb_InCmdList
        PUBLIC zb_OutCmdList
        PUBLIC zb_ReceiveDataIndication
        FUNCTION zb_ReceiveDataIndication,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zb_SendDataConfirm
        FUNCTION zb_SendDataConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zb_SimpleDesc
        PUBLIC zb_StartConfirm
        FUNCTION zb_StartConfirm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
HalLedBlink         SYMBOL "HalLedBlink"
HalLedSet           SYMBOL "HalLedSet"
zb_WriteConfiguration SYMBOL "zb_WriteConfiguration"
initUart            SYMBOL "initUart"
zb_StartRequest     SYMBOL "zb_StartRequest"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
zb_BindDevice       SYMBOL "zb_BindDevice"
HalUARTWrite        SYMBOL "HalUARTWrite"
zb_SendDataRequest  SYMBOL "zb_SendDataRequest"
zb_SystemReset      SYMBOL "zb_SystemReset"
zb_AllowBind        SYMBOL "zb_AllowBind"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_set_event      SYMBOL "osal_set_event"
zb_GetDeviceInfo    SYMBOL "zb_GetDeviceInfo"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
HalUARTRead         SYMBOL "HalUARTRead"
strcpy              SYMBOL "strcpy"
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??initUart?relay    SYMBOL "?relay", initUart
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??strcpy?relay      SYMBOL "?relay", strcpy
??zb_AllowBind?relay SYMBOL "?relay", zb_AllowBind
??zb_BindDevice?relay SYMBOL "?relay", zb_BindDevice
??zb_GetDeviceInfo?relay SYMBOL "?relay", zb_GetDeviceInfo
??zb_SendDataRequest?relay SYMBOL "?relay", zb_SendDataRequest
??zb_StartRequest?relay SYMBOL "?relay", zb_StartRequest
??zb_SystemReset?relay SYMBOL "?relay", zb_SystemReset
??zb_WriteConfiguration?relay SYMBOL "?relay", zb_WriteConfiguration
hex_2_ascii         SYMBOL "hex_2_ascii"
??hex_2_ascii?relay SYMBOL "?relay", hex_2_ascii
uartRxCB            SYMBOL "uartRxCB"
??uartRxCB?relay    SYMBOL "?relay", uartRxCB
zb_AllowBindConfirm SYMBOL "zb_AllowBindConfirm"
??zb_AllowBindConfirm?relay SYMBOL "?relay", zb_AllowBindConfirm
zb_BindConfirm      SYMBOL "zb_BindConfirm"
??zb_BindConfirm?relay SYMBOL "?relay", zb_BindConfirm
zb_FindDeviceConfirm SYMBOL "zb_FindDeviceConfirm"
??zb_FindDeviceConfirm?relay SYMBOL "?relay", zb_FindDeviceConfirm
zb_HandleKeys       SYMBOL "zb_HandleKeys"
??zb_HandleKeys?relay SYMBOL "?relay", zb_HandleKeys
zb_HandleOsalEvent  SYMBOL "zb_HandleOsalEvent"
??zb_HandleOsalEvent?relay SYMBOL "?relay", zb_HandleOsalEvent
zb_ReceiveDataIndication SYMBOL "zb_ReceiveDataIndication"
??zb_ReceiveDataIndication?relay SYMBOL "?relay", zb_ReceiveDataIndication
zb_SendDataConfirm  SYMBOL "zb_SendDataConfirm"
??zb_SendDataConfirm?relay SYMBOL "?relay", zb_SendDataConfirm
zb_StartConfirm     SYMBOL "zb_StartConfirm"
??zb_StartConfirm?relay SYMBOL "?relay", zb_StartConfirm

        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_WriteConfiguration
        FUNCTION zb_WriteConfiguration,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN initUart
        FUNCTION initUart,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_StartRequest
        FUNCTION zb_StartRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_BindDevice
        FUNCTION zb_BindDevice,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SendDataRequest
        FUNCTION zb_SendDataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_SystemReset
        FUNCTION zb_SystemReset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_AllowBind
        FUNCTION zb_AllowBind,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zb_GetDeviceInfo
        FUNCTION zb_GetDeviceInfo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strcpy
        FUNCTION strcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??initUart?relay
        FUNCTION ??initUart?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??strcpy?relay
        FUNCTION ??strcpy?relay,00H
        EXTERN ??zb_AllowBind?relay
        FUNCTION ??zb_AllowBind?relay,00H
        EXTERN ??zb_BindDevice?relay
        FUNCTION ??zb_BindDevice?relay,00H
        EXTERN ??zb_GetDeviceInfo?relay
        FUNCTION ??zb_GetDeviceInfo?relay,00H
        EXTERN ??zb_SendDataRequest?relay
        FUNCTION ??zb_SendDataRequest?relay,00H
        EXTERN ??zb_StartRequest?relay
        FUNCTION ??zb_StartRequest?relay,00H
        EXTERN ??zb_SystemReset?relay
        FUNCTION ??zb_SystemReset?relay,00H
        EXTERN ??zb_WriteConfiguration?relay
        FUNCTION ??zb_WriteConfiguration?relay,00H
        EXTERN sapi_TaskID

// C:\Texas Instruments\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SensorDemo«„–±Ω«+GPRS\Source\DemoCollector.c
//    1 /**************************************************************************************************
//    2   Filename:       DemoCollector.c
//    3 
//    4   Description:    Collector application for the Sensor Demo utilizing Simple API.
//    5 
//    6                   The collector node can be set in a state where it accepts 
//    7                   incoming reports from the sensor nodes, and can send the reports
//    8                   via the UART to a PC tool. The collector node in this state
//    9                   functions as a gateway. The collector nodes that are not in the
//   10                   gateway node function as routers in the network.  
//   11 
//   12 
//   13   Copyright 2009 Texas Instruments Incorporated. All rights reserved.
//   14 
//   15   IMPORTANT: Your use of this Software is limited to those specific rights
//   16   granted under the terms of a software license agreement between the user
//   17   who downloaded the software, his/her employer (which must be your employer)
//   18   and Texas Instruments Incorporated (the "License").  You may not use this
//   19   Software unless you agree to abide by the terms of the License. The License
//   20   limits your use, and you acknowledge, that the Software may not be modified,
//   21   copied or distributed unless embedded on a Texas Instruments microcontroller
//   22   or used solely and exclusively in conjunction with a Texas Instruments radio
//   23   frequency transceiver, which is integrated into your product.  Other than for
//   24   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   25   works of, modify, distribute, perform, display or sell this Software and/or
//   26   its documentation for any purpose.
//   27 
//   28   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   29   PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   30   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   31   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   32   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   33   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   34   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   35   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   36   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   37   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   38   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   39 
//   40   Should you have any questions regarding your right to use this Software,
//   41   contact Texas Instruments Incorporated at www.TI.com.
//   42 **************************************************************************************************/
//   43 
//   44 /******************************************************************************
//   45  * INCLUDES
//   46  */
//   47 
//   48 #include "ZComDef.h"
//   49 #include "OSAL.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "sapi.h"
//   52 #include "hal_key.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DS 1
//   53 #include "hal_led.h"
//   54 #include "hal_lcd.h"
//   55 #include "hal_uart.h"
//   56 #include "string.h"
//   57 
//   58 
//   59 #include "DemoApp.h"
//   60 
//   61 /******************************************************************************
//   62  * CONSTANTS
//   63  */
//   64 
//   65 #define REPORT_FAILURE_LIMIT                4
//   66 #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
//   67 
//   68 // General UART frame offsets
//   69 #define FRAME_SOF_OFFSET                    0
//   70 #define FRAME_LENGTH_OFFSET                 1 
//   71 #define FRAME_CMD0_OFFSET                   2
//   72 #define FRAME_CMD1_OFFSET                   3
//   73 #define FRAME_DATA_OFFSET                   4
//   74 
//   75 // ZB_RECEIVE_DATA_INDICATION offsets
//   76 #define ZB_RECV_SRC_OFFSET                  0
//   77 #define ZB_RECV_CMD_OFFSET                  2
//   78 #define ZB_RECV_LEN_OFFSET                  4
//   79 #define ZB_RECV_DATA_OFFSET                 6
//   80 #define ZB_RECV_FCS_OFFSET                  8
//   81 
//   82 // ZB_RECEIVE_DATA_INDICATION frame length
//   83 #define ZB_RECV_LENGTH                      15//+2//–ﬁ∏ƒ*******************************
//   84 
//   85 // PING response frame length and offset
//   86 #define SYS_PING_RSP_LENGTH                 7 
//   87 #define SYS_PING_CMD_OFFSET                 1
//   88 
//   89 // Stack Profile
//   90 #define ZIGBEE_2007                         0x0040
//   91 #define ZIGBEE_PRO_2007                     0x0041
//   92 
//   93 #ifdef ZIGBEEPRO
//   94 #define STACK_PROFILE                       ZIGBEE_PRO_2007             
//   95 #else 
//   96 #define STACK_PROFILE                       ZIGBEE_2007
//   97 #endif
//   98 
//   99 #define CPT_SOP                             0xFE
//  100 #define SYS_PING_REQUEST                    0x0021
//  101 #define SYS_PING_RESPONSE                   0x0161
//  102 #define ZB_RECEIVE_DATA_INDICATION          0x8746
//  103 
//  104 // Application States
//  105 #define APP_INIT                            0
//  106 #define APP_START                           2
//  107 #define APP_BINDED                          3    
//  108 
//  109 // Application osal event identifiers
//  110 #define MY_START_EVT                        0x0001
//  111 #define MY_REPORT_EVT                       0x0002
//  112 #define MY_FIND_COLLECTOR_EVT               0x0004
//  113 #define MY_ANGLE_EVT                        0x0008
//  114 
//  115 
//  116 //¿©’πøÿ÷∆÷∏¡Ó
//  117 #define  control      P1_3
//  118 #define  control_IN   P1DIR &= ~0x08
//  119 #define  control_OUT  P1DIR |=  0x08
//  120 //¬Ãµ∆“˝Ω≈£¨∂®“Â ‰»Î ‰≥ˆ
//  121 #define  green_led      P1_4
//  122 #define  green_led_IN   P1DIR &= ~0x10
//  123 #define  green_led_OUT  P1DIR |=  0x10
//  124 /******************************************************************************
//  125  * TYPEDEFS
//  126  */
//  127 typedef struct
//  128 {
//  129   uint16              accsign;
//  130   uint16              source;//‘¥µÿ÷∑
//  131   uint16              parent;//∑¢ÀÕΩ⁄µ„µƒ∏∏µÿ÷∑
//  132   uint16              ACCEL_X;//
//  133   uint16              ACCEL_Y;//
//  134   uint16              ACCEL_Z;//
//  135   uint16              GYRO_X;//
//  136   uint16              GYRO_Y;//
//  137   uint16              GYRO_Z;//
//  138 } gtwData_t;
//  139 
//  140 /**************************∂®“ÂAT÷∏¡Ó***************************************/
//  141 #define INIT_APN               "at+cgdcont=1,\"ip\",\"cmnet\""//≈‰÷√apn
//  142 #define ENTRY_TCPIP            "at%etcpip"//Ω¯»Îtcpip π¶ƒ‹
//  143 #define CHECK_NET              "at%etcpip?"//≤Èø¥±æµÿÕ¯¬Á◊¥øˆ
//  144 #define OPEN_TCP               "AT%IPOPEN=\"TCP\",\"119.146.68.41\",5000"//¥Úø™“ªÃıtcp ¡¥Ω”
//  145 #define ASCII_MODE             "at%iomode=0,1,1"//ascii mode Õ∆ºˆ π”√’‚÷÷∑Ω∑®
//  146 #define HEX_MODE               "AT%IOMODE=1,1,0"//hex mode
//  147 #define TEST                    "AT%IPSEND=\"303030303030\""//≤‚ ‘

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  148 uint8 END[2]={0x0d,0x0a};//À´“˝∫≈
END:
        DS 2
        REQUIRE `?<Initializer for END>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  149 uint8 COMM = 0;
COMM:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  150 
//  151 uint16 hex_2_ascii(uint8 *data, uint8 *buffer, uint16 len);//∂®“ÂHEX◊™ªØŒ™ASCII¬Îµƒ∫Ø ˝
//  152 
//  153 /******************************************************************************
//  154  * LOCAL VARIABLES
//  155  */
//  156 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  157 static uint8 appState =             APP_INIT;
appState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  158 static uint8 reportState =          FALSE;
reportState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  159 static uint8 myStartRetryDelay =    10;          // milliseconds
myStartRetryDelay:
        DS 1
        REQUIRE `?<Initializer for myStartRetryDelay>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  160 static uint8 isGateWay =            FALSE;
isGateWay:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  161 static uint16 myBindRetryDelay =    2000;        // milliseconds
myBindRetryDelay:
        DS 2
        REQUIRE `?<Initializer for myBindRetryDelay>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
        DATA
//  162 static uint16 myReportPeriod =      1000;        // milliseconds
myReportPeriod:
        DS 2
        REQUIRE `?<Initializer for myReportPeriod>`
        REQUIRE __INIT_XDATA_I
//  163 

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  164 static uint8 reportFailureNr =      0;
reportFailureNr:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  165 static uint16 parentShortAddr;
parentShortAddr:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
//  166 static gtwData_t gtwData;           //∂®“Â“ª∏ˆΩ·ππÃÂ∂‘œÛ£¨”√”⁄¥Ê∑≈X£¨Y£¨Z÷·µƒ–≈œ¢
gtwData:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  167 
//  168 /******************************************************************************
//  169  * LOCAL FUNCTIONS
//  170  */
//  171 
//  172 static uint8 calcFCS(uint8 *pBuf, uint8 len);
//  173 static void sysPingReqRcvd(void);
//  174 static void sysPingRsp(void);
//  175 static void sendGtwReport(gtwData_t *gtwData);
//  176 static void sendDummyReport(void);
//  177 /******************************************************************************
//  178  * GLOBAL VARIABLES
//  179  */
//  180 
//  181 // Inputs and Outputs for Collector device
//  182 #define NUM_OUT_CMD_COLLECTOR                2
//  183 #define NUM_IN_CMD_COLLECTOR                 2
//  184 
//  185 // List of output and input commands for Collector device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  186 const cId_t zb_InCmdList[NUM_IN_CMD_COLLECTOR] =
zb_InCmdList:
        DW 2, 3
//  187 {
//  188   SENSOR_REPORT_CMD_ID,
//  189   DUMMY_REPORT_CMD_ID
//  190 };
//  191 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  192 const cId_t zb_OutCmdList[NUM_IN_CMD_COLLECTOR] =
zb_OutCmdList:
        DW 2, 3
//  193 {
//  194   SENSOR_REPORT_CMD_ID,
//  195   DUMMY_REPORT_CMD_ID
//  196 };
//  197 
//  198 // Define SimpleDescriptor for Collector device

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
//  199 const SimpleDescriptionFormat_t zb_SimpleDesc =
zb_SimpleDesc:
        DB 2
        DW 3872, 2
        DB 1, 2
        DW zb_InCmdList
        DB 2
        DW zb_OutCmdList
//  200 {
//  201   MY_ENDPOINT_ID,             //  Endpoint
//  202   MY_PROFILE_ID,              //  Profile ID
//  203   DEV_ID_COLLECTOR,           //  Device ID
//  204   DEVICE_VERSION_COLLECTOR,   //  Device Version
//  205   0,                          //  Reserved
//  206   NUM_IN_CMD_COLLECTOR,       //  Number of Input Commands
//  207   (cId_t *) zb_InCmdList,     //  Input Command List
//  208   NUM_OUT_CMD_COLLECTOR,      //  Number of Output Commands
//  209   (cId_t *) zb_OutCmdList     //  Output Command List
//  210 };
//  211 
//  212 /******************************************************************************
//  213  * FUNCTIONS
//  214  */
//  215 
//  216 /******************************************************************************
//  217  * @fn          zb_HandleOsalEvent
//  218  *
//  219  * @brief       The zb_HandleOsalEvent function is called by the operating
//  220  *              system when a task event is set
//  221  *
//  222  * @param       event - Bitmask containing the events that have been set
//  223  *
//  224  * @return      none
//  225  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  226 void zb_HandleOsalEvent( uint16 event )
zb_HandleOsalEvent:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zb_HandleOsalEvent
//  227 {
        FUNCALL zb_HandleOsalEvent, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, initUart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_StartRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_StartRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_BindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, zb_SendDataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleOsalEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  228   uint8 logicalType;
//  229   uint8 txOptions;
//  230   static uint8 reportNr=0; 
//  231   
//  232   if(event & SYS_EVENT_MSG)
//  233   {
//  234     
//  235   }
//  236   
//  237   if( event & ZB_ENTRY_EVENT )
        MOV     A,#0x10
        ANL     A,R7
        MOV     R1,A
        CLR     A
        JNZ     ??zb_HandleOsalEvent_0
        MOV     A,R1
??zb_HandleOsalEvent_0:
        JZ      ??zb_HandleOsalEvent_1
//  238   {  
//  239 
//  240       /****************************–ﬁ∏ƒ≤ø∑÷************************************************************/
//  241   
//  242     
//  243      // blind LED 1 to indicate starting/joining a network
//  244     HalLedBlink ( HAL_LED_1, 0, 50, 500 );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R3,#0x32
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedBlink?relay
//  245     HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  246     
//  247     if ( appState == APP_INIT )
        MOV     DPTR,#appState
        MOVX    A,@DPTR
        JNZ     ??zb_HandleOsalEvent_2
//  248     {
//  249     #ifdef MY_TYPE_COLLECTOR
//  250     logicalType = ZG_DEVICETYPE_COORDINATOR;
        LCALL   ?Subroutine8 & 0xFFFF
//  251     zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
//  252     initUart(uartRxCB);
??CrossCallReturnLabel_21:
        ; Setup parameters for call to function initUart
        MOV     R2,#(??uartRxCB?relay & 0xff)
        MOV     R3,#((??uartRxCB?relay >> 8) & 0xff)
        LCALL   ??initUart?relay
//  253     #else
//  254     logicalType = ZG_DEVICETYPE_ROUTER;
//  255     zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
//  256     #endif
//  257     }
//  258     // Start the device 
//  259     zb_StartRequest();
??zb_HandleOsalEvent_2:
        ; Setup parameters for call to function zb_StartRequest
        LCALL   ??zb_StartRequest?relay
//  260   
//  261     /***********************************************************************************************/
//  262   }
//  263   
//  264   if ( event & MY_START_EVT )
??zb_HandleOsalEvent_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??zb_HandleOsalEvent_3
//  265   {
//  266     zb_StartRequest();
        ; Setup parameters for call to function zb_StartRequest
        LCALL   ??zb_StartRequest?relay
//  267   }
//  268   
//  269   if ( event & MY_REPORT_EVT )
??zb_HandleOsalEvent_3:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??zb_HandleOsalEvent_4
//  270   {
//  271     if (isGateWay) 
        MOV     DPTR,#isGateWay
        MOVX    A,@DPTR
        JZ      ??zb_HandleOsalEvent_5
//  272     {
//  273       osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
??zb_HandleOsalEvent_6:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine15 & 0xFFFF
//  274     }
??CrossCallReturnLabel_38:
        MOV     R2,#0x2
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        SJMP    ??zb_HandleOsalEvent_4
//  275     else if (appState == APP_BINDED) 
??zb_HandleOsalEvent_5:
        MOV     DPTR,#appState
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??zb_HandleOsalEvent_6
//  276     {
//  277       sendDummyReport();
//  278       osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
//  279     }
//  280   }
//  281   if ( event & MY_FIND_COLLECTOR_EVT )
??zb_HandleOsalEvent_4:
        MOV     A,R6
        ANL     A,#0x4
        JZ      ??zb_HandleOsalEvent_7
//  282   { 
//  283     // Find and bind to a gateway device (if this node is not gateway)
//  284     if (!isGateWay) 
        MOV     DPTR,#isGateWay
        MOVX    A,@DPTR
        JNZ     ??zb_HandleOsalEvent_7
//  285     {
//  286       zb_BindDevice( TRUE, DUMMY_REPORT_CMD_ID, (uint8 *)NULL );
        ; Setup parameters for call to function zb_BindDevice
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     R1,#0x1
        LCALL   ??zb_BindDevice?relay
//  287     }
//  288   }
//  289   
//  290   if(event & MY_ANGLE_EVT)//??????????????????????
??zb_HandleOsalEvent_7:
        MOV     A,R6
        ANL     A,#0x8
        JNZ     $+5
        LJMP    ??CrossCallReturnLabel_8 & 0xFFFF
//  291   {
//  292     
//  293     switch(COMM)
        MOV     DPTR,#COMM
        MOVX    A,@DPTR
        LCALL   ?UC_SWITCH_DENSE
`?<Jumptable for zb_HandleOsalEvent>_0`:
        DATA
        DB        0
        DB        5
        DW        ??zb_HandleOsalEvent_8
        DW        ??zb_HandleOsalEvent_9
        DW        ??zb_HandleOsalEvent_10
        DW        ??zb_HandleOsalEvent_11
        DW        ??zb_HandleOsalEvent_12
        DW        ??zb_HandleOsalEvent_13
        DW        ??zb_HandleOsalEvent_14
        CODE
//  294     {
//  295       case 0:
//  296         HalUARTWrite(HAL_UART_PORT_0,INIT_APN,sizeof(INIT_APN));//≥ı ºªØ¡¨Ω”√¸¡Ó
??zb_HandleOsalEvent_9:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1a
        MOV     R5,#0x0
        MOV     R2,#(`?<Constant "at+cgdcont=1,\\"ip\\",\\"cm...">` & 0xff)
        MOV     R3,#((`?<Constant "at+cgdcont=1,\\"ip\\",\\"cm...">` >> 8) & 0xff)
??zb_HandleOsalEvent_15:
        LCALL   ?Subroutine10 & 0xFFFF
//  297         HalUARTWrite(HAL_UART_PORT_0,END,sizeof(END));
??CrossCallReturnLabel_25:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  298         COMM++;
        MOV     DPTR,#COMM
        MOVX    A,@DPTR
        INC     A
??zb_HandleOsalEvent_16:
        LCALL   ?Subroutine0 & 0xFFFF
//  299         osal_start_timerEx( sapi_TaskID, MY_ANGLE_EVT, 3*myReportPeriod );//…Ë÷√0.5√Î÷¥––œ¬“ªÃı÷∏¡Ó
??CrossCallReturnLabel_0:
        SJMP    ??zb_HandleOsalEvent_17
//  300         //HalUARTWrite(HAL_UART_PORT_0,END,sizeof(END));
//  301         break;
//  302       case 1:
//  303         HalUARTWrite(HAL_UART_PORT_0,ENTRY_TCPIP,sizeof(ENTRY_TCPIP));//Ω¯»ÎTCP/IP√¸¡Ó
??zb_HandleOsalEvent_10:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xa
        MOV     R5,#0x0
        MOV     R2,#(`?<Constant "at%etcpip">` & 0xff)
        MOV     R3,#((`?<Constant "at%etcpip">` >> 8) & 0xff)
        SJMP    ??zb_HandleOsalEvent_15
//  304         HalUARTWrite(HAL_UART_PORT_0,END,sizeof(END));
//  305         COMM++;
//  306         osal_start_timerEx( sapi_TaskID, MY_ANGLE_EVT, 3*myReportPeriod );//…Ë÷√0.5√Î÷¥––œ¬“ªÃı÷∏¡Ó
//  307        
//  308         break;
//  309       case 2:
//  310           HalUARTWrite(HAL_UART_PORT_0,OPEN_TCP, sizeof(OPEN_TCP));//¥Úø™¡¨Ω”√¸¡Ó
??zb_HandleOsalEvent_11:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x25
        MOV     R5,#0x0
        MOV     R2,#(`?<Constant "AT%IPOPEN=\\"TCP\\",\\"119....">` & 0xff)
        MOV     R3,#((`?<Constant "AT%IPOPEN=\\"TCP\\",\\"119....">` >> 8) & 0xff)
        LCALL   ?Subroutine6 & 0xFFFF
//  311           HalUARTWrite(HAL_UART_PORT_0,END,sizeof(END));
//  312           COMM=COMM+2;
??CrossCallReturnLabel_13:
        LCALL   ?Subroutine0 & 0xFFFF
//  313           osal_start_timerEx( sapi_TaskID, MY_ANGLE_EVT, 3*myReportPeriod );//…Ë÷√0.5√Î÷¥––œ¬“ªÃı÷∏¡Ó
??CrossCallReturnLabel_1:
        SJMP    ??zb_HandleOsalEvent_17
//  314         break;
//  315       case 3:
//  316           HalUARTWrite(HAL_UART_PORT_0,HEX_MODE, sizeof(HEX_MODE));//…Ë÷√∑¢ÀÕ◊÷∑˚Œ™hex mode
??zb_HandleOsalEvent_12:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R2,#(`?<Constant "AT%IOMODE=1,1,0">` & 0xff)
        MOV     R3,#((`?<Constant "AT%IOMODE=1,1,0">` >> 8) & 0xff)
        LCALL   ?Subroutine10 & 0xFFFF
//  317           HalUARTWrite(HAL_UART_PORT_0,END,sizeof(END));
??CrossCallReturnLabel_26:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??CrossCallReturnLabel_7
//  318           //COMM++;
//  319         //osal_start_timerEx( sapi_TaskID, MY_ANGLE_EVT, 3*myReportPeriod );//…Ë÷√0.5√Î÷¥––œ¬“ªÃı÷∏¡Ó
//  320          break;
//  321       case 4:
//  322           HalUARTWrite(HAL_UART_PORT_0,TEST,sizeof(TEST));
??zb_HandleOsalEvent_13:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x19
        MOV     R5,#0x0
        MOV     R2,#(`?<Constant "AT%IPSEND=\\"303030303030\\"">` & 0xff)
        MOV     R3,#((`?<Constant "AT%IPSEND=\\"303030303030\\"">` >> 8) & 0xff)
        LCALL   ?Subroutine6 & 0xFFFF
//  323           HalUARTWrite(HAL_UART_PORT_0,END,sizeof(END));
//  324           COMM=COMM+2;
??CrossCallReturnLabel_14:
        SJMP    ??zb_HandleOsalEvent_16
//  325          
//  326         //HalUARTWrite(HAL_UART_PORT_0,ASCII_MODE, sizeof(ASCII_MODE));//…Ë÷√∑¢ÀÕ◊÷∑˚Œ™ascii mode
//  327        
//  328         osal_start_timerEx( sapi_TaskID, MY_ANGLE_EVT, 3*myReportPeriod );//…Ë÷√0.5√Î÷¥––œ¬“ªÃı÷∏¡Ó
//  329          break;
//  330       case 5: 
//  331         HalUARTWrite(HAL_UART_PORT_0,CHECK_NET, sizeof(CHECK_NET));//≤È—ØÕ¯¬Á√¸¡Ó
??zb_HandleOsalEvent_14:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xb
        MOV     R5,#0x0
        MOV     R2,#(`?<Constant "at%etcpip?">` & 0xff)
        MOV     R3,#((`?<Constant "at%etcpip?">` >> 8) & 0xff)
        SJMP    ??CrossCallReturnLabel_26
//  332         //COMM++;
//  333         //osal_start_timerEx( sapi_TaskID, MY_ANGLE_EVT, 3*myReportPeriod );//…Ë÷√0.5√Î÷¥––œ¬“ªÃı÷∏¡Ó;
//  334          break;
//  335     default :
//  336       osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT,5* myReportPeriod );//…Ë÷√5√Î◊‘∂Øπ„≤•
??zb_HandleOsalEvent_8:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine1 & 0xFFFF
//  337       break;
//  338     }
//  339   }
??CrossCallReturnLabel_2:
        MOV     R2,#0x2
??zb_HandleOsalEvent_17:
        LCALL   ?Subroutine3 & 0xFFFF
//  340   
//  341   if ( event & MY_ANGLE_EVT )
//  342   {
//  343     if ( ++reportNr<ACK_REQ_INTERVAL && reportFailureNr==0 ) 
??CrossCallReturnLabel_7:
        MOV     DPTR,#??reportNr
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x5
        JNC     ??zb_HandleOsalEvent_18
        MOV     DPTR,#reportFailureNr
        MOVX    A,@DPTR
        JNZ     ??zb_HandleOsalEvent_18
//  344      {
//  345       txOptions = AF_TX_OPTIONS_NONE;
        MOV     R2,#0x0
        SJMP    ??zb_HandleOsalEvent_19
//  346       }
//  347       else 
//  348      {
//  349        txOptions = AF_MSG_ACK_REQUEST;
??zb_HandleOsalEvent_18:
        MOV     R2,#0x10
//  350          reportNr = 0;
        CLR     A
        MOV     DPTR,#??reportNr
        MOVX    @DPTR,A
//  351      }
//  352     zb_SendDataRequest( 0xFFFF, SENSOR_REPORT_CMD_ID, 1, "1", 0, txOptions, 0 );//π„≤•**********************************************
??zb_HandleOsalEvent_19:
        ; Setup parameters for call to function zb_SendDataRequest
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#(`?<Constant "1">` & 0xff)
        MOV     ?V0 + 1,#((`?<Constant "1">` >> 8) & 0xff)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0x1
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#-0x1
        MOV     R3,#-0x1
        LCALL   ??zb_SendDataRequest?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  353     if(COMM>4)
        MOV     DPTR,#COMM
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x5
        JC      ??CrossCallReturnLabel_8
//  354     {
//  355     osal_start_timerEx( sapi_TaskID, MY_ANGLE_EVT, 1*myReportPeriod );//‘O÷√√ø1√Î«Î«Û ˝æ›*******************************
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine15 & 0xFFFF
//  356     }
//  357   }
??CrossCallReturnLabel_39:
        MOV     R2,#0x8
        LCALL   ?Subroutine3 & 0xFFFF
//  358 }
??CrossCallReturnLabel_8:
        MOV     A,#0x1
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine20
        ; // Fall through to label ?Subroutine20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_31:
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_26
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_13
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_32, ??CrossCallReturnLabel_14
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#(END & 0xff)
        MOV     R3,#((END >> 8) & 0xff)
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        MOV     DPTR,#COMM
        MOVX    A,@DPTR
        ADD     A,#0x2
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_start_timerEx
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_40:
        MOV     A,R4
        MOV     B,#0x3
        MUL     AB
        MOV     R4,A
        MOV     R2,B
        MOV     B,#0x3
        MOV     A,R5
        MUL     AB
        ADD     A,R2
        MOV     R5,A
        MOV     R2,#0x8
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_38
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_0
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_1
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_2
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_3
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV     DPTR,#myReportPeriod
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_37
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_39
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_0
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_1
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_2
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_3
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30

        RSEG XDATA_Z:XDATA:NOROOT(0)
??reportNr:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  359 
//  360 /******************************************************************************
//  361  * @fn      zb_HandleKeys
//  362  *
//  363  * @brief   Handles all key events for this device.
//  364  *
//  365  * @param   shift - true if in shift/alt.
//  366  * @param   keys - bit field for key events. Valid entries:
//  367  *                 EVAL_SW4
//  368  *                 EVAL_SW3
//  369  *                 EVAL_SW2
//  370  *                 EVAL_SW1
//  371  *
//  372  * @return  none
//  373  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  374 void zb_HandleKeys( uint8 shift, uint8 keys )
zb_HandleKeys:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function zb_HandleKeys
//  375 {
        FUNCALL zb_HandleKeys, zb_WriteConfiguration
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleKeys, zb_SystemReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleKeys, zb_AllowBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleKeys, zb_AllowBind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_HandleKeys, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R2
        MOV     R6,A
//  376   static uint8 allowBind=FALSE;
//  377 
//  378   uint8 logicalType;
//  379 
//  380   // Shift is used to make each button/switch dual purpose.
//  381   if ( shift )
        MOV     A,R1
        JNZ     ??CrossCallReturnLabel_44
//  382   {
//  383     if ( keys & HAL_KEY_SW_1 )
//  384     {
//  385     }
//  386     if ( keys & HAL_KEY_SW_2 )
//  387     {
//  388     }
//  389     if ( keys & HAL_KEY_SW_3 )
//  390     {
//  391     }
//  392     if ( keys & HAL_KEY_SW_4 )
//  393     {
//  394     }
//  395   }
//  396   else
//  397   {
//  398     if ( keys & HAL_KEY_SW_1 )
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??zb_HandleKeys_0
//  399     {
//  400       if ( appState == APP_INIT  )
        MOV     DPTR,#appState
        MOVX    A,@DPTR
        JNZ     ??zb_HandleKeys_0
//  401       {
//  402         // Key 1 starts device as a coordinator
//  403         logicalType = ZG_DEVICETYPE_COORDINATOR;
        LCALL   ?Subroutine8 & 0xFFFF
//  404         zb_WriteConfiguration(ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType);
//  405                 
//  406         // Reset the device with new configuration
//  407         zb_SystemReset();
??CrossCallReturnLabel_22:
        ; Setup parameters for call to function zb_SystemReset
        LCALL   ??zb_SystemReset?relay
//  408       }
//  409     }
//  410     if ( keys & HAL_KEY_SW_2 )
??zb_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??zb_HandleKeys_1
//  411     {
//  412       allowBind ^= 1;
        MOV     DPTR,#??allowBind
        MOVX    A,@DPTR
        XRL     A,#0x1
        MOVX    @DPTR,A
//  413       if (allowBind) 
        JZ      ??zb_HandleKeys_2
//  414       {
//  415         // Turn ON Allow Bind mode infinitly
//  416         zb_AllowBind( 0xFF );
        ; Setup parameters for call to function zb_AllowBind
        MOV     R1,#-0x1
        LCALL   ??zb_AllowBind?relay
//  417         HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  418         //This node is the gateway node
//  419         isGateWay = TRUE;
        MOV     A,#0x1
        MOV     DPTR,#isGateWay
        MOVX    @DPTR,A
//  420         
//  421         // Update the display
//  422         #if defined ( LCD_SUPPORTED )
//  423         HalLcdWriteString( "Gateway Mode", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#(`?<Constant "Gateway Mode">` & 0xff)
        MOV     R3,#((`?<Constant "Gateway Mode">` >> 8) & 0xff)
        SJMP    ??zb_HandleKeys_3
//  424         #endif
//  425       }
//  426       else
//  427       {
//  428         // Turn OFF Allow Bind mode infinitly
//  429         zb_AllowBind( 0x00 );
??zb_HandleKeys_2:
        ; Setup parameters for call to function zb_AllowBind
        MOV     R1,#0x0
        LCALL   ??zb_AllowBind?relay
//  430         HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  431         isGateWay = FALSE;
        CLR     A
        MOV     DPTR,#isGateWay
        MOVX    @DPTR,A
//  432         
//  433         // Update the display
//  434         #if defined ( LCD_SUPPORTED )
//  435         HalLcdWriteString( "Collector", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#(`?<Constant "Collector">` & 0xff)
        MOV     R3,#((`?<Constant "Collector">` >> 8) & 0xff)
??zb_HandleKeys_3:
        LCALL   ??HalLcdWriteString?relay
//  436         #endif
//  437       }
//  438     }
//  439     if ( keys & HAL_KEY_SW_3 )
??zb_HandleKeys_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.4
        JNC     ??CrossCallReturnLabel_44
//  440     {
//  441       // Start reporting
//  442       osal_set_event( sapi_TaskID, MY_REPORT_EVT );
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        LCALL   ??Subroutine24_0 & 0xFFFF
//  443     }
//  444     if ( keys & HAL_KEY_SW_4 )
//  445     {
//  446       
//  447     }
//  448     }
//  449   }
??CrossCallReturnLabel_44:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock31
        REQUIRE ?Subroutine21
        ; // Fall through to label ?Subroutine21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        CLR     A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function zb_WriteConfiguration
        ; Setup parameters for call to function zb_WriteConfiguration
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,#0x1
        MOV     R1,#-0x79
        LCALL   ??zb_WriteConfiguration?relay
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35

        RSEG XDATA_Z:XDATA:NOROOT(0)
??allowBind:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  450 
//  451 
//  452 /******************************************************************************
//  453  * @fn          zb_StartConfirm
//  454  *
//  455  * @brief       The zb_StartConfirm callback is called by the ZigBee stack
//  456  *              after a start request operation completes
//  457  *
//  458  * @param       status - The status of the start operation.  Status of
//  459  *                       ZB_SUCCESS indicates the start operation completed
//  460  *                       successfully.  Else the status is an error code.
//  461  *
//  462  * @return      none
//  463  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  464 void zb_StartConfirm( uint8 status )
zb_StartConfirm:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function zb_StartConfirm
//  465 { 
        FUNCALL zb_StartConfirm, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, zb_GetDeviceInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_StartConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  466   // If the device sucessfully started, change state to running
//  467   if ( status == ZB_SUCCESS )   
        MOV     A,R1
        JNZ     ??zb_StartConfirm_0
//  468   {
//  469     // Set LED 1 to indicate that node is operational on the network
//  470     HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  471     
//  472     // Update the display
//  473     #if defined ( LCD_SUPPORTED )
//  474     HalLcdWriteString( "SensorDemo", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#(`?<Constant "SensorDemo">` & 0xff)
        MOV     R3,#((`?<Constant "SensorDemo">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  475     HalLcdWriteString( "Collector", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#(`?<Constant "Collector">` & 0xff)
        MOV     R3,#((`?<Constant "Collector">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteString?relay
//  476     #endif
//  477     
//  478     // Change application state
//  479     appState = APP_START;
        MOV     A,#0x2
        MOV     DPTR,#appState
        MOVX    @DPTR,A
//  480     
//  481     // Set event to bind to a collector
//  482     osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine5 & 0xFFFF
//  483        
//  484      // Store parent short address
//  485     zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
??CrossCallReturnLabel_42:
        ; Setup parameters for call to function zb_GetDeviceInfo
        MOV     R2,#(parentShortAddr & 0xff)
        MOV     R3,#((parentShortAddr >> 8) & 0xff)
        MOV     R1,#0x3
        LCALL   ??zb_GetDeviceInfo?relay
//  486     
//  487     //æØ±®≥ı ºªØ£¨Ω´I/O…Ë÷√Œ™ ‰≥ˆ£¨ ‰≥ˆµÕµÁ∆Ω
//  488     control_OUT;
        ORL     0xfe,#0x8
//  489     control=0;
        CLR     0x90.3
//  490     //¬Ãµ∆≥ı ºªØ,Ω´I/O…Ë÷√Œ™ ‰≥ˆ£¨ ‰≥ˆ∏ﬂµÁ∆Ω
//  491     green_led_OUT;
        ORL     0xfe,#0x10
//  492     green_led=1;
        SETB    0x90.4
//  493     
//  494     osal_start_timerEx( sapi_TaskID, MY_ANGLE_EVT, 5*myReportPeriod );//‘O÷√√ø2√Î«Î«Û ˝æ›*******************************
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine1 & 0xFFFF
//  495   }
??CrossCallReturnLabel_3:
        MOV     R2,#0x8
        SJMP    ??zb_StartConfirm_1
//  496   else
//  497   {
//  498     // Try again later with a delay
//  499     osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
??zb_StartConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myStartRetryDelay
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#0x1
//  500   }
??zb_StartConfirm_1:
        LCALL   ?Subroutine3 & 0xFFFF
//  501 }
??CrossCallReturnLabel_9:
        SJMP    ?Subroutine21
        CFI EndBlock cfiBlock36
        REQUIRE _A_P1
        REQUIRE P1DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_42
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond38) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond38) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond38) CFA_SP SP+-5
        CFI Block cfiPicker39 Using cfiCommon1
        CFI (cfiPicker39) NoFunction
        CFI (cfiPicker39) Picker
        MOV     R2,#0x4
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiPicker39
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_44
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_43
        CFI (cfiCond42) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond42) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond42) CFA_SP SP+-5
        CFI Block cfiPicker43 Using cfiCommon1
        CFI (cfiPicker43) NoFunction
        CFI (cfiPicker43) Picker
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiPicker43

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond44 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond48) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond48) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond48) CFA_SP SP+-5
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     A,R4
        MOV     B,#0x5
        MUL     AB
        MOV     R4,A
        MOV     R2,B
        MOV     B,#0x5
        MOV     A,R5
        MUL     AB
        ADD     A,R2
        MOV     R5,A
        RET
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52
//  502 
//  503 /******************************************************************************
//  504  * @fn          zb_SendDataConfirm
//  505  *
//  506  * @brief       The zb_SendDataConfirm callback function is called by the
//  507  *              ZigBee stack after a send data operation completes
//  508  *
//  509  * @param       handle - The handle identifying the data transmission.
//  510  *              status - The status of the operation.
//  511  *
//  512  * @return      none
//  513  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  514 void zb_SendDataConfirm( uint8 handle, uint8 status )
zb_SendDataConfirm:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI Function zb_SendDataConfirm
//  515 {
        FUNCALL zb_SendDataConfirm, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataConfirm, zb_BindDevice
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_SendDataConfirm, osal_set_event
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  516   if ( status != ZB_SUCCESS && !isGateWay ) 
        MOV     A,R2
        JZ      ??zb_SendDataConfirm_0
        MOV     DPTR,#isGateWay
        MOVX    A,@DPTR
        JNZ     ??zb_SendDataConfirm_0
//  517   {
//  518     if ( ++reportFailureNr>=REPORT_FAILURE_LIMIT ) 
        MOV     DPTR,#reportFailureNr
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        CLR     C
        SUBB    A,#0x4
        JC      ??zb_SendDataConfirm_1
//  519     {   
//  520        // Stop reporting
//  521        osal_stop_timerEx( sapi_TaskID, MY_REPORT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#sapi_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  522        
//  523        // After failure reporting start automatically when the device
//  524        // is binded to a new gateway
//  525        reportState=TRUE;
        MOV     A,#0x1
        MOV     DPTR,#reportState
        MOVX    @DPTR,A
//  526        
//  527        // Delete previous binding
//  528        zb_BindDevice( FALSE, DUMMY_REPORT_CMD_ID, (uint8 *)NULL );
        ; Setup parameters for call to function zb_BindDevice
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     R1,#0x0
        LCALL   ??zb_BindDevice?relay
//  529        
//  530        // Try binding to a new gateway
//  531        osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
        ; Setup parameters for call to function osal_set_event
        LCALL   ?Subroutine5 & 0xFFFF
//  532        reportFailureNr=0;
??CrossCallReturnLabel_43:
        SJMP    ??zb_SendDataConfirm_2
//  533     }
//  534   }
//  535   else if ( !isGateWay ) 
??zb_SendDataConfirm_0:
        MOV     DPTR,#isGateWay
        MOVX    A,@DPTR
        JNZ     ??zb_SendDataConfirm_1
//  536   {
//  537     reportFailureNr=0;
??zb_SendDataConfirm_2:
        CLR     A
        MOV     DPTR,#reportFailureNr
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock53
//  538   }
//  539 }
??zb_SendDataConfirm_1:
        REQUIRE ?Subroutine22
        ; // Fall through to label ?Subroutine22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock54
//  540 
//  541 /******************************************************************************
//  542  * @fn          zb_BindConfirm
//  543  *
//  544  * @brief       The zb_BindConfirm callback is called by the ZigBee stack
//  545  *              after a bind operation completes.
//  546  *
//  547  * @param       commandId - The command ID of the binding being confirmed.
//  548  *              status - The status of the bind operation.
//  549  *
//  550  * @return      none
//  551  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  552 void zb_BindConfirm( uint16 commandId, uint8 status )
zb_BindConfirm:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function zb_BindConfirm
//  553 {
        FUNCALL zb_BindConfirm, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_BindConfirm, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  554   if( status == ZB_SUCCESS )
        MOV     A,R1
        JNZ     ??zb_BindConfirm_0
//  555   {
//  556     appState = APP_BINDED;
        MOV     A,#0x3
        MOV     DPTR,#appState
        MOVX    @DPTR,A
//  557     // Set LED2 to indicate binding successful
//  558     HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
        SJMP    ??CrossCallReturnLabel_10
//  559     
//  560     // After failure reporting start automatically when the device
//  561     // is binded to a new gateway
//  562    /* if ( reportState ) 
//  563     {
//  564       // Start reporting
//  565       osal_set_event( sapi_TaskID, MY_REPORT_EVT );
//  566     }*/
//  567   }
//  568   else
//  569   {
//  570     osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
??zb_BindConfirm_0:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#myBindRetryDelay
        LCALL   ??Subroutine23_0 & 0xFFFF
//  571   }
??CrossCallReturnLabel_37:
        MOV     R2,#0x4
        LCALL   ?Subroutine3 & 0xFFFF
//  572 }
??CrossCallReturnLabel_10:
        SJMP    ?Subroutine22
        CFI EndBlock cfiBlock55
//  573 
//  574 /******************************************************************************
//  575  * @fn          zb_AllowBindConfirm
//  576  *
//  577  * @brief       Indicates when another device attempted to bind to this device
//  578  *
//  579  * @param
//  580  *
//  581  * @return      none
//  582  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  583 void zb_AllowBindConfirm( uint16 source )
zb_AllowBindConfirm:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI Function zb_AllowBindConfirm
//  584 {
        ; Saved register size: 0
        ; Auto size: 0
//  585   
//  586 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock56
//  587 
//  588 /******************************************************************************
//  589  * @fn          zb_FindDeviceConfirm
//  590  *
//  591  * @brief       The zb_FindDeviceConfirm callback function is called by the
//  592  *              ZigBee stack when a find device operation completes.
//  593  *
//  594  * @param       searchType - The type of search that was performed.
//  595  *              searchKey - Value that the search was executed on.
//  596  *              result - The result of the search.
//  597  *
//  598  * @return      none
//  599  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  600 void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
zb_FindDeviceConfirm:
        CFI Block cfiBlock57 Using cfiCommon0
        CFI Function zb_FindDeviceConfirm
//  601 {
        ; Saved register size: 0
        ; Auto size: 0
//  602 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock57
//  603 
//  604 /******************************************************************************
//  605  * @fn          zb_ReceiveDataIndication
//  606  *
//  607  * @brief       The zb_ReceiveDataIndication callback function is called
//  608  *              asynchronously by the ZigBee stack to notify the application
//  609  *              when data is received from a peer device.
//  610  *
//  611  * @param       source - The short address of the peer device that sent the data
//  612  *              command - The commandId associated with the data
//  613  *              len - The number of bytes in the pData parameter
//  614  *              pData - The data sent by the peer device
//  615  *
//  616  * @return      none
//  617  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  618 void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData)
zb_ReceiveDataIndication:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function zb_ReceiveDataIndication
//  619 { 
        FUNCALL zb_ReceiveDataIndication, HalLcdWriteScreen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zb_ReceiveDataIndication, sendGtwReport
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//  620   gtwData.accsign=BUILD_UINT16(pData[sign+1], pData[sign]);//Ω´Ω⁄µ„∑¢¿¥µƒ ˝æ›¥Ê»ÎΩ·ππÃÂ
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     DPTR,#gtwData
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  621   gtwData.parent = BUILD_UINT16(pData[SENSOR_PARENT_OFFSET+ 1], pData[SENSOR_PARENT_OFFSET]);//Ω´Ω⁄µ„∑¢¿¥µƒ ˝æ›¥Ê»ÎΩ·ππÃÂ
        MOV     A,R0
        ADD     A,#0xf
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     R6,A
        MOV     A,R0
        ADD     A,#0xe
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     R5,A
        MOV     A,R6
        MOV     DPTR,#(gtwData + 4)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  622   gtwData.source=source;//Ω´Ω⁄µ„∑¢¿¥µƒ ˝æ›¥Ê»ÎΩ·ππÃÂ
        MOV     DPTR,#(gtwData + 2)
        MOV     A,R2
        LCALL   ?Subroutine9 & 0xFFFF
//  623   gtwData.ACCEL_X = BUILD_UINT16(pData[SENSOR_ACCEL_XOUT_H_OFFSET+ 1], pData[SENSOR_ACCEL_XOUT_H_OFFSET]);//Ω´Ω⁄µ„∑¢¿¥µƒ ˝æ›¥Ê»ÎΩ·ππÃÂ
??CrossCallReturnLabel_23:
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_35:
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        MOV     DPTR,#(gtwData + 6)
        LCALL   ?Subroutine12 & 0xFFFF
//  624   gtwData.ACCEL_Y = BUILD_UINT16(pData[SENSOR_ACCEL_YOUT_H_OFFSET+ 1], pData[SENSOR_ACCEL_YOUT_H_OFFSET]);//Ω´Ω⁄µ„∑¢¿¥µƒ ˝æ›¥Ê»ÎΩ·ππÃÂ
??CrossCallReturnLabel_29:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_11:
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        MOV     DPTR,#(gtwData + 8)
        LCALL   ?Subroutine12 & 0xFFFF
//  625   gtwData.ACCEL_Z = BUILD_UINT16(pData[SENSOR_ACCEL_ZOUT_H_OFFSET+ 1], pData[SENSOR_ACCEL_ZOUT_H_OFFSET]);//Ω´Ω⁄µ„∑¢¿¥µƒ ˝æ›¥Ê»ÎΩ·ππÃÂ
??CrossCallReturnLabel_30:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_12:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        MOV     DPTR,#(gtwData + 10)
        LCALL   ?Subroutine9 & 0xFFFF
//  626   gtwData.GYRO_X = BUILD_UINT16(pData[SENSOR_GYRO_XOUT_H_OFFSET+ 1], pData[SENSOR_GYRO_XOUT_H_OFFSET]);//Ω´Ω⁄µ„∑¢¿¥µƒ ˝æ›¥Ê»ÎΩ·ππÃÂ
??CrossCallReturnLabel_24:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        MOV     DPTR,#(gtwData + 12)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  627   gtwData.GYRO_Y = BUILD_UINT16(pData[SENSOR_GYRO_YOUT_H_OFFSET+ 1], pData[SENSOR_GYRO_YOUT_H_OFFSET]);//Ω´Ω⁄µ„∑¢¿¥µƒ ˝æ›¥Ê»ÎΩ·ππÃÂ
        MOV     A,R0
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R4
        MOV     DPTR,#(gtwData + 14)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  628   gtwData.GYRO_Z = BUILD_UINT16(pData[SENSOR_GYRO_ZOUT_H_OFFSET+ 1], pData[SENSOR_GYRO_ZOUT_H_OFFSET]);//Ω´Ω⁄µ„∑¢¿¥µƒ ˝æ›¥Ê»ÎΩ·ππÃÂ
        MOV     A,R0
        ADD     A,#0xd
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV     R2,A
        MOV     A,R0
        ADD     A,#0xc
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     R1,A
        MOV     A,R2
        MOV     DPTR,#(gtwData + 16)
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  629   
//  630   // Update the display
//  631   #if defined ( LCD_SUPPORTED )
//  632   HalLcdWriteScreen( "Report", "rcvd" );
        ; Setup parameters for call to function HalLcdWriteScreen
        MOV     R4,#(`?<Constant "rcvd">` & 0xff)
        MOV     R5,#((`?<Constant "rcvd">` >> 8) & 0xff)
        MOV     R2,#(`?<Constant "Report">` & 0xff)
        MOV     R3,#((`?<Constant "Report">` >> 8) & 0xff)
        LCALL   ??HalLcdWriteScreen?relay
//  633   #endif
//  634   
//  635   // Send gateway report
//  636   sendGtwReport(&gtwData);
        ; Setup parameters for call to function sendGtwReport
        MOV     R2,#(gtwData & 0xff)
        MOV     R3,#((gtwData >> 8) & 0xff)
        LCALL   ??sendGtwReport?relay
//  637 }
        LJMP    ?Subroutine21 & 0xFFFF
        CFI EndBlock cfiBlock58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_47
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        MOV     DPL,A
        MOV     A,R1
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
        CFI Block cfiCond64 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_45
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond65 Using cfiCommon0
        CFI (cfiCond65) NoFunction
        CFI (cfiCond65) Conditional ??CrossCallReturnLabel_46
        CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond65) CFA_SP SP+0
        CFI (cfiCond65) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_47
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_48
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_49
        CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond68) CFA_SP SP+0
        CFI (cfiCond68) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond64
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond71 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond72 Using cfiCommon0
        CFI (cfiCond72) NoFunction
        CFI (cfiCond72) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond72) CFA_SP SP+0
        CFI (cfiCond72) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker73 Using cfiCommon1
        CFI (cfiPicker73) NoFunction
        CFI (cfiPicker73) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_51:
        RET
        CFI EndBlock cfiCond71
        CFI EndBlock cfiCond72
        CFI EndBlock cfiPicker73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond74 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond75 Using cfiCommon0
        CFI (cfiCond75) NoFunction
        CFI (cfiCond75) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_30
        CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond75) CFA_SP SP+0
        CFI (cfiCond75) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_23
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond77 Using cfiCommon0
        CFI (cfiCond77) NoFunction
        CFI (cfiCond77) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_24
        CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond77) CFA_SP SP+0
        CFI (cfiCond77) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker78 Using cfiCommon1
        CFI (cfiPicker78) NoFunction
        CFI (cfiPicker78) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        CFI EndBlock cfiCond74
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiCond77
        CFI EndBlock cfiPicker78
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
        CFI Block cfiCond79 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_15
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond81 Using cfiCommon0
        CFI (cfiCond81) NoFunction
        CFI (cfiCond81) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_16
        CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond81) CFA_SP SP+0
        CFI (cfiCond81) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond82 Using cfiCommon0
        CFI (cfiCond82) NoFunction
        CFI (cfiCond82) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_17
        CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond82) CFA_SP SP+0
        CFI (cfiCond82) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond83 Using cfiCommon0
        CFI (cfiCond83) NoFunction
        CFI (cfiCond83) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_18
        CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond83) CFA_SP SP+0
        CFI (cfiCond83) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond84 Using cfiCommon0
        CFI (cfiCond84) NoFunction
        CFI (cfiCond84) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_19
        CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond84) CFA_SP SP+0
        CFI (cfiCond84) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond85 Using cfiCommon0
        CFI (cfiCond85) NoFunction
        CFI (cfiCond85) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_20
        CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond85) CFA_SP SP+0
        CFI (cfiCond85) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_29
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond87 Using cfiCommon0
        CFI (cfiCond87) NoFunction
        CFI (cfiCond87) Conditional ??CrossCallReturnLabel_51, ??CrossCallReturnLabel_30
        CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond87) CFA_SP SP+0
        CFI (cfiCond87) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond88 Using cfiCommon0
        CFI (cfiCond88) NoFunction
        CFI (cfiCond88) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_23
        CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond88) CFA_SP SP+0
        CFI (cfiCond88) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_24
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker90 Using cfiCommon1
        CFI (cfiPicker90) NoFunction
        CFI (cfiPicker90) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiCond81
        CFI EndBlock cfiCond82
        CFI EndBlock cfiCond83
        CFI EndBlock cfiCond84
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiCond87
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiPicker90

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond91 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond92 Using cfiCommon0
        CFI (cfiCond92) NoFunction
        CFI (cfiCond92) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond92) CFA_SP SP+0
        CFI (cfiCond92) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker93 Using cfiCommon1
        CFI (cfiPicker93) NoFunction
        CFI (cfiPicker93) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_52:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond91
        CFI EndBlock cfiCond92
        CFI EndBlock cfiPicker93

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond94 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond95 Using cfiCommon0
        CFI (cfiCond95) NoFunction
        CFI (cfiCond95) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond95) CFA_SP SP+0
        CFI (cfiCond95) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker96 Using cfiCommon1
        CFI (cfiPicker96) NoFunction
        CFI (cfiPicker96) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_34:
        RET
        CFI EndBlock cfiCond94
        CFI EndBlock cfiCond95
        CFI EndBlock cfiPicker96

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond97 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_12
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_4
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_5
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker101 Using cfiCommon1
        CFI (cfiPicker101) NoFunction
        CFI (cfiPicker101) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_36:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiPicker101

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond102 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond103 Using cfiCommon0
        CFI (cfiCond103) NoFunction
        CFI (cfiCond103) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_11
        CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond103) CFA_SP SP+0
        CFI (cfiCond103) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_12
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_4
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_5
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker107 Using cfiCommon1
        CFI (cfiPicker107) NoFunction
        CFI (cfiPicker107) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond102
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiPicker107

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond108 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker110 Using cfiCommon1
        CFI (cfiPicker110) NoFunction
        CFI (cfiPicker110) Picker
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_33:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiPicker110
//  638 
//  639 /******************************************************************************
//  640  * @fn          uartRxCB
//  641  *
//  642  * @brief       Callback function for UART 
//  643  *
//  644  * @param       port - UART port
//  645  *              event - UART event that caused callback 
//  646  *
//  647  * @return      none
//  648  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  649 void uartRxCB( uint8 port, uint8 event )
uartRxCB:
        CFI Block cfiBlock111 Using cfiCommon0
        CFI Function uartRxCB
//  650 {
        FUNCALL uartRxCB, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, calcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL uartRxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 145, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 145, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 135
        MOV     A,#0x79
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 145)
//  651   uint8 pBuf[RX_BUF_LEN];
//  652   uint16 cmd;
//  653   uint16 len;
//  654   
//  655   if ( event != HAL_UART_TX_EMPTY ) 
        MOV     A,#0x10
        XRL     A,R2
        JNZ     $+5
        LJMP    ??uartRxCB_0 & 0xFFFF
//  656   {
//  657     //HalLcdWriteString(pBuf+1,3);
//  658     // Read from UART
//  659     len = HalUARTRead( HAL_UART_PORT_0, pBuf, RX_BUF_LEN );
//  660     
//  661     if ( len>0 ) 
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#-0x80
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        JNZ     ??uartRxCB_1
        MOV     A,R3
??uartRxCB_1:
        JNZ     $+5
        LJMP    ??uartRxCB_0 & 0xFFFF
//  662     {
//  663       cmd = BUILD_UINT16(pBuf[SYS_PING_CMD_OFFSET+ 1], pBuf[SYS_PING_CMD_OFFSET]);
//  664   
//  665       if( (pBuf[FRAME_SOF_OFFSET] == CPT_SOP) && (cmd == SYS_PING_REQUEST) ) //»Áπ˚ «œµÕ≥«Î«Û
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??uartRxCB_2
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,#0x21
        XRL     A,R0
        JNZ     ??uartRxCB_3
        MOV     A,R1
??uartRxCB_3:
        JNZ     ??uartRxCB_2
//  666       {
//  667         sysPingReqRcvd();
        MOV     A,#-0x2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x61
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x41
        MOVX    @DPTR,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function calcFCS
        MOV     R1,#0x5
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??calcFCS?relay
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  668       }
        SJMP    ??uartRxCB_0
//  669       else
//  670       {
//  671           
//  672         
//  673         //∫Û∆⁄¿©’πøÿ÷∆∑‰Œÿ∆˜µƒπ¶ƒ‹
//  674         
//  675        //≈–∂œ «∑Òøÿ÷∆–≈œ¢
//  676           if (pBuf[11]=='4' && pBuf[12]=='1' && pBuf[13]=='4' && pBuf[14]=='1' )//≈–∂œΩ” ’µΩµƒ”Ôæ‰÷–£¨ «∑Ò∞¸∫¨°∞4141°±£¨º¥AAµƒASCII¬Î
??uartRxCB_2:
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x34
        JNZ     ??uartRxCB_0
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x31
        XRL     A,R2
        JNZ     ??uartRxCB_4
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x34
        JNZ     ??uartRxCB_0
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x31
        JNZ     ??uartRxCB_0
//  677           {
//  678             //control_OUT;
//  679             control=1;//P1_3 ‰»Î∏ﬂµÁ∆Ω
        SETB    0x90.3
//  680             green_led=0;//πÿ±’¬Ãµ∆
        CLR     0x90.4
        SJMP    ??uartRxCB_0
//  681           }
??uartRxCB_4:
        MOV     A,#0x32
        XRL     A,R2
        JNZ     ??uartRxCB_0
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x34
        JNZ     ??uartRxCB_0
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x32
        JNZ     ??uartRxCB_0
//  682           
//  683           if (pBuf[11]=='4' && pBuf[12]=='2' && pBuf[13]=='4' && pBuf[14]=='2' )//≈–∂œΩ” ’µΩµƒ”Ôæ‰÷–£¨ «∑Ò∞¸∫¨°∞4242°±£¨º¥BBµƒASCII¬Î
//  684           {
//  685             //control_OUT;
//  686             control=0;//P1_3 ‰»ÎµÕµÁ∆Ω
        CLR     0x90.3
//  687             green_led=1;//ø™∆Ù¬Ãµ∆
        SETB    0x90.4
//  688           }
//  689     }
//  690   }
//  691   }
//  692 }
??uartRxCB_0:
        MOV     A,#-0x79
        LJMP    ?Subroutine20 & 0xFFFF
        CFI EndBlock cfiBlock111
        REQUIRE _A_P1
//  693 
//  694 /******************************************************************************
//  695  * @fn          sysPingReqRcvd
//  696  *
//  697  * @brief       Ping request received 
//  698  *
//  699  * @param       none
//  700  *              
//  701  * @return      none
//  702  */
//  703 static void sysPingReqRcvd(void)
//  704 {
//  705    sysPingRsp();
//  706 }
//  707 
//  708 /******************************************************************************
//  709  * @fn          sysPingRsp
//  710  *
//  711  * @brief       Build and send Ping response
//  712  *
//  713  * @param       none
//  714  *              
//  715  * @return      none
//  716  */
//  717 static void sysPingRsp(void)
//  718 {
//  719   uint8 pBuf[SYS_PING_RSP_LENGTH];
//  720   
//  721   // Start of Frame Delimiter
//  722   pBuf[FRAME_SOF_OFFSET] = CPT_SOP;
//  723   
//  724   // Length
//  725   pBuf[FRAME_LENGTH_OFFSET] = 2; 
//  726   
//  727   // Command type
//  728   pBuf[FRAME_CMD0_OFFSET] = LO_UINT16(SYS_PING_RESPONSE); 
//  729   pBuf[FRAME_CMD1_OFFSET] = HI_UINT16(SYS_PING_RESPONSE);
//  730   
//  731   // Stack profile
//  732   pBuf[FRAME_DATA_OFFSET] = LO_UINT16(STACK_PROFILE);
//  733   pBuf[FRAME_DATA_OFFSET+ 1] = HI_UINT16(STACK_PROFILE);
//  734   
//  735   // Frame Check Sequence
//  736   pBuf[SYS_PING_RSP_LENGTH - 1] = calcFCS(&pBuf[FRAME_LENGTH_OFFSET], (SYS_PING_RSP_LENGTH - 2));
//  737   
//  738   // Write frame to UART
//  739   HalUARTWrite(HAL_UART_PORT_0,pBuf, SYS_PING_RSP_LENGTH);
//  740 }
//  741 
//  742 /******************************************************************************
//  743  * @fn          sendGtwReport
//  744  *
//  745  * @brief       Build and send gateway report
//  746  *
//  747  * @param       none
//  748  *              
//  749  * @return      none
//  750  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  751 static void sendGtwReport(gtwData_t *gtwData)
sendGtwReport:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI Function sendGtwReport
//  752 {
        FUNCALL sendGtwReport, calcFCS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendGtwReport, strcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendGtwReport, hex_2_ascii
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 69, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 69, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL sendGtwReport, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 67, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 67, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 57
        MOV     A,#-0x39
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 67)
//  753   uint8 temparr[42];//∂®“Â“™∑¢ÀÕµƒ◊‹≥§∂»£∫11ŒªAT÷∏¡ÓÕ∑£¨4Œª±Í÷æŒª£¨24Œª ˝æ›£¨1Œªµ•“˝∫≈£¨2ŒªΩ· ¯∑˚£©
//  754   
//  755   if(COMM<5)//ºÏ≤‚ «∑ÒΩ®¡¢TCP¡¨Ω”,≤¢∑¢ÀÕ°∞00°±±Í÷æŒª
        MOV     DPTR,#COMM
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x5
        JNC     $+5
        LJMP    ??sendGtwReport_0 & 0xFFFF
//  756   {
//  757     return;//»Áπ˚ªπ√ªΩ®¡¢£¨‘ÚΩ· ¯
//  758   }
//  759         uint8 pFrame[ZB_RECV_LENGTH];//∂®“ÂŒﬁ∑˚∫≈8Œªµƒ∂‘œÛ ˝◊È¿¥Ã·»°Ω·ππÃÂ÷–∏ﬂ8Œª£¨µÕ8Œªµƒ–≈œ¢
//  760         //gtwData.sign=pData[sign];
//  761         pFrame[sign]=  HI_UINT16(gtwData->accsign);
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  762         pFrame[sign+1]= LO_UINT16(gtwData->accsign);
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  763         
//  764         pFrame[SENSOR_ACCEL_XOUT_H_OFFSET]=  HI_UINT16(gtwData->ACCEL_X);
        MOV     A,R2
        ADD     A,#0x6
        MOV     R0,A
        LCALL   ??Subroutine27_0 & 0xFFFF
??CrossCallReturnLabel_55:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine7 & 0xFFFF
//  765         pFrame[SENSOR_ACCEL_XOUT_H_OFFSET+1]=  LO_UINT16(gtwData->ACCEL_X);
??CrossCallReturnLabel_15:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  766         
//  767         pFrame[SENSOR_ACCEL_YOUT_H_OFFSET]=  HI_UINT16(gtwData->ACCEL_Y);
        MOV     A,R2
        ADD     A,#0x8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_56:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine7 & 0xFFFF
//  768         pFrame[SENSOR_ACCEL_YOUT_H_OFFSET+1] =  LO_UINT16(gtwData->ACCEL_Y);
??CrossCallReturnLabel_16:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  769 
//  770         pFrame[SENSOR_ACCEL_ZOUT_H_OFFSET]=  HI_UINT16(gtwData->ACCEL_Z);
        MOV     A,R2
        ADD     A,#0xa
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_57:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine7 & 0xFFFF
//  771         pFrame[SENSOR_ACCEL_ZOUT_H_OFFSET+1] =  LO_UINT16(gtwData->ACCEL_Z);
??CrossCallReturnLabel_17:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  772 
//  773         pFrame[SENSOR_GYRO_XOUT_H_OFFSET]=  HI_UINT16(gtwData->GYRO_X);
        MOV     A,R2
        ADD     A,#0xc
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_58:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine7 & 0xFFFF
//  774         pFrame[SENSOR_GYRO_XOUT_H_OFFSET+1] =  LO_UINT16(gtwData->GYRO_X);
??CrossCallReturnLabel_18:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  775 
//  776         pFrame[SENSOR_GYRO_YOUT_H_OFFSET]=  HI_UINT16(gtwData->GYRO_Y);
        MOV     A,R2
        ADD     A,#0xe
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_59:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine7 & 0xFFFF
//  777         pFrame[SENSOR_GYRO_YOUT_H_OFFSET+1] =  LO_UINT16(gtwData->GYRO_Y);
??CrossCallReturnLabel_19:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  778 
//  779         pFrame[SENSOR_GYRO_ZOUT_H_OFFSET]=  HI_UINT16(gtwData->GYRO_Z);
        MOV     A,R2
        ADD     A,#0x10
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_60:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine7 & 0xFFFF
//  780         pFrame[SENSOR_GYRO_ZOUT_H_OFFSET+1] =  LO_UINT16(gtwData->GYRO_Z);
??CrossCallReturnLabel_20:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  781   
//  782         pFrame[SENSOR_PARENT_OFFSET]     = LO_UINT16(gtwData->parent); 
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        LCALL   ??Subroutine26_0 & 0xFFFF
//  783         pFrame[SENSOR_PARENT_OFFSET+1]   = HI_UINT16(gtwData->parent);
??CrossCallReturnLabel_53:
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  784   
//  785   // Frame Check Sequence
//  786   pFrame[ZB_RECV_LENGTH - 2] = calcFCS(&pFrame[FRAME_LENGTH_OFFSET], (ZB_RECV_LENGTH - 2) );
        ; Setup parameters for call to function calcFCS
        MOV     R1,#0xd
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??calcFCS?relay
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  787   
//  788   strcpy(temparr,"AT%IPSEND=\"");//Œ™“™¥´ÀÕµƒ∂‘œÛº”…œAT÷∏¡ÓÕ∑
        ; Setup parameters for call to function strcpy
        MOV     R4,#(`?<Constant "AT%IPSEND=\\"">` & 0xff)
        MOV     R5,#((`?<Constant "AT%IPSEND=\\"">` >> 8) & 0xff)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strcpy?relay
//  789   //strcpy(temparr+11,pFrame);//Œ™“™¥´ÀÕµƒ∂‘œÛº”…œ”––ß ˝æ›≤ø∑÷
//  790   
//  791   hex_2_ascii(pFrame,temparr+11,14);
        ; Setup parameters for call to function hex_2_ascii
        MOV     ?V0 + 0,#0xe
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 69)
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??hex_2_ascii?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 67)
//  792   temparr[39]=0X22;//Œ™“™¥´ÀÕµƒ∂‘œÛº”…œµ•“˝∫≈
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x22
        MOVX    @DPTR,A
//  793   temparr[40]=0X0d;
        MOV     A,#0x37
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xd
        MOVX    @DPTR,A
//  794   temparr[41]=0X0a;
        MOV     A,#0x38
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  795   // Write report to UART
//  796   HalUARTWrite(HAL_UART_PORT_0,temparr,42);//Ω´ ˝æ›Õ®π˝¥Æø⁄ ‰≥ˆ
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2a
        MOV     R5,#0x0
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  797   //HalUARTWrite(HAL_UART_PORT_0,END,sizeof(END));// ‰≥ˆAT÷∏¡ÓΩ·Œ≤
//  798 }
??sendGtwReport_0:
        MOV     A,#0x39
        LJMP    ?Subroutine20 & 0xFFFF
        CFI EndBlock cfiBlock112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond113 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_56
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond115 Using cfiCommon0
        CFI (cfiCond115) NoFunction
        CFI (cfiCond115) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond115) CFA_SP SP+0
        CFI (cfiCond115) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond116 Using cfiCommon0
        CFI (cfiCond116) NoFunction
        CFI (cfiCond116) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond116) CFA_SP SP+0
        CFI (cfiCond116) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiPicker118 Using cfiCommon1
        CFI (cfiPicker118) NoFunction
        CFI (cfiPicker118) Picker
        INC     R0
        INC     R0
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiCond115
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiPicker118
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
        CFI Block cfiCond119 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond121 Using cfiCommon0
        CFI (cfiCond121) NoFunction
        CFI (cfiCond121) Conditional ??CrossCallReturnLabel_57
        CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond121) CFA_SP SP+0
        CFI (cfiCond121) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond122 Using cfiCommon0
        CFI (cfiCond122) NoFunction
        CFI (cfiCond122) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond122) CFA_SP SP+0
        CFI (cfiCond122) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiPicker125 Using cfiCommon1
        CFI (cfiPicker125) NoFunction
        CFI (cfiPicker125) Picker
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiCond121
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiPicker125

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond126 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond128 Using cfiCommon0
        CFI (cfiCond128) NoFunction
        CFI (cfiCond128) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond128) CFA_SP SP+0
        CFI (cfiCond128) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond129 Using cfiCommon0
        CFI (cfiCond129) NoFunction
        CFI (cfiCond129) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond129) CFA_SP SP+0
        CFI (cfiCond129) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 67)
        CFI Block cfiPicker132 Using cfiCommon1
        CFI (cfiPicker132) NoFunction
        CFI (cfiPicker132) Picker
        LCALL   ??Subroutine26_0 & 0xFFFF
??CrossCallReturnLabel_54:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiCond128
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiPicker132
//  799 
//  800 /******************************************************************************
//  801  * @fn          sendDummyReport
//  802  *
//  803  * @brief       Send dummy report (used to visualize collector nodes on PC GUI)
//  804  *
//  805  * @param       none
//  806  *              
//  807  * @return      none
//  808  */
//  809 static void sendDummyReport(void)
//  810 {
//  811 //  uint8 pData[SENSOR_REPORT_LENGTH];
//  812 //  static uint8 reportNr=0;
//  813 //  uint8 txOptions;
//  814 //  
//  815 //  // dummy report data
//  816 //  pData[SENSOR_TEMP_OFFSET] =  0xFF;
//  817 //  pData[SENSOR_VOLTAGE_OFFSET] = 0xFF; 
//  818 //    
//  819 //  pData[SENSOR_PARENT_OFFSET] =  HI_UINT16(parentShortAddr);
//  820 //  pData[SENSOR_PARENT_OFFSET+ 1] =  LO_UINT16(parentShortAddr);
//  821 //  
//  822 //  // Set ACK request on each ACK_INTERVAL report
//  823 //  // If a report failed, set ACK request on next report
//  824 //  if ( ++reportNr<ACK_REQ_INTERVAL && reportFailureNr==0 ) 
//  825 //  {
//  826 //    txOptions = AF_TX_OPTIONS_NONE;
//  827 //  }
//  828 //  else 
//  829 //  {
//  830 //    txOptions = AF_MSG_ACK_REQUEST;
//  831 //    reportNr = 0;
//  832 //  }
//  833 //  
//  834 //  // Destination address 0xFFFE: Destination address is sent to previously
//  835 //  // established binding for the commandId.
//  836 //  zb_SendDataRequest( 0xFFFE, DUMMY_REPORT_CMD_ID, SENSOR_REPORT_LENGTH, pData, 0, txOptions, 0 );
//  837 }
//  838 
//  839 /******************************************************************************
//  840  * @fn          calcFCS
//  841  *
//  842  * @brief       This function calculates the FCS checksum for the serial message 
//  843  *
//  844  * @param       pBuf - Pointer to the end of a buffer to calculate the FCS.
//  845  *              len - Length of the pBuf.
//  846  *
//  847  * @return      The calculated FCS.
//  848  ******************************************************************************
//  849  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  850 static uint8 calcFCS(uint8 *pBuf, uint8 len)
calcFCS:
        CFI Block cfiBlock133 Using cfiCommon0
        CFI Function calcFCS
//  851 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  852   uint8 rtrn = 0;
        MOV     R1,#0x0
        SJMP    ??calcFCS_0
//  853 
//  854   while (len--)
//  855   {
//  856     rtrn ^= *pBuf++;
??calcFCS_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XCH     A,R1
        XRL     A,R1
        MOV     R1,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  857   }
??calcFCS_0:
        MOV     A,R4
        DEC     R4
        JNZ     ??calcFCS_1
//  858 
//  859   return rtrn;
        LJMP    ?Subroutine22 & 0xFFFF
        CFI EndBlock cfiBlock133
//  860 }
//  861 
//  862 /*******************************************
//  863       HEX µΩ ASCII µƒ◊™ªª∫Ø ˝
//  864       »Îø⁄≤Œ ˝£∫ data: ◊™ªª ˝æ›µƒ»Îø⁄÷∏’Î
//  865       buffer: ◊™ªª∫Û ˝æ›»Îø⁄÷∏’Î
//  866       len : –Ë“™◊™ªªµƒ≥§∂»
//  867       ∑µªÿ≤Œ ˝£∫◊™ªª∫Û ˝æ›≥§∂»
//  868 *******************************************/
//  869 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  870 uint16 hex_2_ascii(uint8 *data, uint8 *buffer, uint16 len)
hex_2_ascii:
        CFI Block cfiBlock134 Using cfiCommon0
        CFI Function hex_2_ascii
//  871 {
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
//  872     const uint8 ascTable[17] = {"0123456789ABCDEF"};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#((`?<Constant "0123456789ABCDEF">` >> 8) & 0xff)
        MOV     DPL,#(`?<Constant "0123456789ABCDEF">` & 0xff)
        MOV     A,#0x11
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  873     uint8 *tmp_p = buffer;
//  874     uint16 i, pos;
//  875     pos = 0;
        MOV     R2,A
        MOV     R3,A
//  876     for(i = 0; i < len; i++)
        MOV     ?V0 + 2,A
        SJMP    ??hex_2_ascii_0
//  877       {
//  878         tmp_p[pos++] = ascTable[data[i] >> 4];
??hex_2_ascii_1:
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,?V0 + 3
        MOV     ?V0 + 1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     ?V0 + 6,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,DPH
        LCALL   ??Subroutine25_0 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine11 & 0xFFFF
//  879         tmp_p[pos++] = ascTable[data[i] & 0x0f];
??CrossCallReturnLabel_27:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0xf
        ANL     A,R4
        MOV     R4,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R4
        MOV     DPL,A
        MOV     A,DPH
        LCALL   ??Subroutine25_0 & 0xFFFF
//  880       }
??CrossCallReturnLabel_46:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,R2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,R3
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_28:
        MOV     A,?V0 + 2
        ADD     A,#0x1
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
??hex_2_ascii_0:
        MOV     ?V0 + 3,A
        MOV     A,R0
        ADD     A,R2
        MOV     R4,A
        MOV     A,R1
        ADDC    A,R3
        MOV     R5,A
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,?V0 + 4
        MOV     A,?V0 + 3
        SUBB    A,?V0 + 5
        JC      ??hex_2_ascii_1
//  881     tmp_p[pos] = '\0';
        CLR     A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
//  882     return pos;
        MOV     A,#0x11
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock134
//  883 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond135 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 33)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker137 Using cfiCommon1
        CFI (cfiPicker137) NoFunction
        CFI (cfiPicker137) Picker
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x1
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiPicker137

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for END>`:
        DB 13, 10

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for myStartRetryDelay>`:
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for myBindRetryDelay>`:
        DW 2000

        RSEG XDATA_ID:CODE:NOROOT(0)
        DATA
`?<Initializer for myReportPeriod>`:
        DW 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleOsalEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleOsalEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_StartConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_StartConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_SendDataConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_SendDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_BindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_BindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_AllowBindConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_AllowBindConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_FindDeviceConfirm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_FindDeviceConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zb_ReceiveDataIndication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zb_ReceiveDataIndication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??uartRxCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    uartRxCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sendGtwReport?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    sendGtwReport

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??calcFCS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    calcFCS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??hex_2_ascii?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    hex_2_ascii

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "at+cgdcont=1,\\"ip\\",\\"cm...">`:
        DB "at+cgdcont=1,\"ip\",\"cmnet\""

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "at%etcpip">`:
        DB "at%etcpip"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "AT%IPOPEN=\\"TCP\\",\\"119....">`:
        DB "AT%IPOPEN=\"TCP\",\"119.146.68.41\",5000"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "AT%IOMODE=1,1,0">`:
        DB "AT%IOMODE=1,1,0"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "AT%IPSEND=\\"303030303030\\"">`:
        DB "AT%IPSEND=\"303030303030\""

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "at%etcpip?">`:
        DB "at%etcpip?"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "1">`:
        DB "1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "Gateway Mode">`:
        DB "Gateway Mode"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "Collector">`:
        DB "Collector"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "SensorDemo">`:
        DB "SensorDemo"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "Report">`:
        DB "Report"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "rcvd">`:
        DB "rcvd"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "AT%IPSEND=\\"">`:
        DB "AT%IPSEND=\""

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA
`?<Constant "0123456789ABCDEF">`:
        DB "0123456789ABCDEF"

        END
// 
// 1 937 bytes in segment BANKED_CODE
//    72 bytes in segment BANK_RELAYS
//     2 bytes in segment SFR_AN
//     7 bytes in segment XDATA_I
//     7 bytes in segment XDATA_ID
//   222 bytes in segment XDATA_ROM_C
//    27 bytes in segment XDATA_Z
// 
// 2 016 bytes of CODE  memory
//   222 bytes of CONST memory
//     0 bytes of DATA  memory (+ 2 bytes shared)
//    34 bytes of XDATA memory
//
//Errors: none
//Warnings: 3
